local __DARKLUA_BUNDLE_MODULES
__DARKLUA_BUNDLE_MODULES = {
	cache = {},
	load = function(m)
		if not __DARKLUA_BUNDLE_MODULES.cache[m] then
			__DARKLUA_BUNDLE_MODULES.cache[m] = { c = __DARKLUA_BUNDLE_MODULES[m]() }
		end
		return __DARKLUA_BUNDLE_MODULES.cache[m].c
	end,
}
do
	function __DARKLUA_BUNDLE_MODULES.a()
		local SOLIDUS_TRANSPARENT = {
			{ { 0x00, 0x03, 0x00 }, { 0x33, 0x03, 0x00 } },
			{ { 0x39, 0x03, 0x00 }, { 0x6F, 0x03, 0x00 } },
			{ { 0x83, 0x04, 0x00 }, { 0x87, 0x04, 0x00 } },
			{ { 0x91, 0x05, 0x00 }, { 0xBD, 0x05, 0x00 } },
			{ { 0xBF, 0x05, 0x00 }, { 0xBF, 0x05, 0x00 } },
			{ { 0xC1, 0x05, 0x00 }, { 0xC2, 0x05, 0x00 } },
			{ { 0xC4, 0x05, 0x00 }, { 0xC5, 0x05, 0x00 } },
			{ { 0xC7, 0x05, 0x00 }, { 0xC7, 0x05, 0x00 } },
			{ { 0x10, 0x06, 0x00 }, { 0x1A, 0x06, 0x00 } },
			{ { 0x4B, 0x06, 0x00 }, { 0x5F, 0x06, 0x00 } },
			{ { 0x70, 0x06, 0x00 }, { 0x70, 0x06, 0x00 } },
			{ { 0xD6, 0x06, 0x00 }, { 0xDC, 0x06, 0x00 } },
			{ { 0xDF, 0x06, 0x00 }, { 0xE4, 0x06, 0x00 } },
			{ { 0xE7, 0x06, 0x00 }, { 0xE8, 0x06, 0x00 } },
			{ { 0xEA, 0x06, 0x00 }, { 0xED, 0x06, 0x00 } },
			{ { 0x11, 0x07, 0x00 }, { 0x11, 0x07, 0x00 } },
			{ { 0x30, 0x07, 0x00 }, { 0x4A, 0x07, 0x00 } },
			{ { 0xEB, 0x07, 0x00 }, { 0xF3, 0x07, 0x00 } },
			{ { 0xFD, 0x07, 0x00 }, { 0xFD, 0x07, 0x00 } },
			{ { 0x16, 0x08, 0x00 }, { 0x19, 0x08, 0x00 } },
			{ { 0x1B, 0x08, 0x00 }, { 0x23, 0x08, 0x00 } },
			{ { 0x25, 0x08, 0x00 }, { 0x27, 0x08, 0x00 } },
			{ { 0x29, 0x08, 0x00 }, { 0x2D, 0x08, 0x00 } },
			{ { 0x59, 0x08, 0x00 }, { 0x5B, 0x08, 0x00 } },
			{ { 0x98, 0x08, 0x00 }, { 0x9F, 0x08, 0x00 } },
			{ { 0xCA, 0x08, 0x00 }, { 0xE1, 0x08, 0x00 } },
			{ { 0xE3, 0x08, 0x00 }, { 0xFF, 0x08, 0x00 } },
			{ { 0x3C, 0x09, 0x00 }, { 0x3C, 0x09, 0x00 } },
			{ { 0x4D, 0x09, 0x00 }, { 0x4D, 0x09, 0x00 } },
			{ { 0x51, 0x09, 0x00 }, { 0x54, 0x09, 0x00 } },
			{ { 0xBC, 0x09, 0x00 }, { 0xBC, 0x09, 0x00 } },
			{ { 0xCD, 0x09, 0x00 }, { 0xCD, 0x09, 0x00 } },
			{ { 0xFE, 0x09, 0x00 }, { 0xFE, 0x09, 0x00 } },
			{ { 0x3C, 0x0A, 0x00 }, { 0x3C, 0x0A, 0x00 } },
			{ { 0x4D, 0x0A, 0x00 }, { 0x4D, 0x0A, 0x00 } },
			{ { 0xBC, 0x0A, 0x00 }, { 0xBC, 0x0A, 0x00 } },
			{ { 0xCD, 0x0A, 0x00 }, { 0xCD, 0x0A, 0x00 } },
			{ { 0x3C, 0x0B, 0x00 }, { 0x3C, 0x0B, 0x00 } },
			{ { 0x4D, 0x0B, 0x00 }, { 0x4D, 0x0B, 0x00 } },
			{ { 0xCD, 0x0B, 0x00 }, { 0xCD, 0x0B, 0x00 } },
			{ { 0x3C, 0x0C, 0x00 }, { 0x3C, 0x0C, 0x00 } },
			{ { 0x4D, 0x0C, 0x00 }, { 0x4D, 0x0C, 0x00 } },
			{ { 0x55, 0x0C, 0x00 }, { 0x56, 0x0C, 0x00 } },
			{ { 0xBC, 0x0C, 0x00 }, { 0xBC, 0x0C, 0x00 } },
			{ { 0xCD, 0x0C, 0x00 }, { 0xCD, 0x0C, 0x00 } },
			{ { 0x3B, 0x0D, 0x00 }, { 0x3C, 0x0D, 0x00 } },
			{ { 0x4D, 0x0D, 0x00 }, { 0x4D, 0x0D, 0x00 } },
			{ { 0xCA, 0x0D, 0x00 }, { 0xCA, 0x0D, 0x00 } },
			{ { 0x38, 0x0E, 0x00 }, { 0x3A, 0x0E, 0x00 } },
			{ { 0x48, 0x0E, 0x00 }, { 0x4B, 0x0E, 0x00 } },
			{ { 0xB8, 0x0E, 0x00 }, { 0xBA, 0x0E, 0x00 } },
			{ { 0xC8, 0x0E, 0x00 }, { 0xCB, 0x0E, 0x00 } },
			{ { 0x18, 0x0F, 0x00 }, { 0x19, 0x0F, 0x00 } },
			{ { 0x35, 0x0F, 0x00 }, { 0x35, 0x0F, 0x00 } },
			{ { 0x37, 0x0F, 0x00 }, { 0x37, 0x0F, 0x00 } },
			{ { 0x39, 0x0F, 0x00 }, { 0x39, 0x0F, 0x00 } },
			{ { 0x71, 0x0F, 0x00 }, { 0x75, 0x0F, 0x00 } },
			{ { 0x7A, 0x0F, 0x00 }, { 0x7D, 0x0F, 0x00 } },
			{ { 0x80, 0x0F, 0x00 }, { 0x84, 0x0F, 0x00 } },
			{ { 0x86, 0x0F, 0x00 }, { 0x87, 0x0F, 0x00 } },
			{ { 0xC6, 0x0F, 0x00 }, { 0xC6, 0x0F, 0x00 } },
			{ { 0x37, 0x10, 0x00 }, { 0x37, 0x10, 0x00 } },
			{ { 0x39, 0x10, 0x00 }, { 0x3A, 0x10, 0x00 } },
			{ { 0x8D, 0x10, 0x00 }, { 0x8D, 0x10, 0x00 } },
			{ { 0x5D, 0x13, 0x00 }, { 0x5F, 0x13, 0x00 } },
			{ { 0x14, 0x17, 0x00 }, { 0x15, 0x17, 0x00 } },
			{ { 0x34, 0x17, 0x00 }, { 0x34, 0x17, 0x00 } },
			{ { 0xD2, 0x17, 0x00 }, { 0xD2, 0x17, 0x00 } },
			{ { 0xDD, 0x17, 0x00 }, { 0xDD, 0x17, 0x00 } },
			{ { 0xA9, 0x18, 0x00 }, { 0xA9, 0x18, 0x00 } },
			{ { 0x39, 0x19, 0x00 }, { 0x3B, 0x19, 0x00 } },
			{ { 0x17, 0x1A, 0x00 }, { 0x18, 0x1A, 0x00 } },
			{ { 0x60, 0x1A, 0x00 }, { 0x60, 0x1A, 0x00 } },
			{ { 0x75, 0x1A, 0x00 }, { 0x7C, 0x1A, 0x00 } },
			{ { 0x7F, 0x1A, 0x00 }, { 0x7F, 0x1A, 0x00 } },
			{ { 0xB0, 0x1A, 0x00 }, { 0xBD, 0x1A, 0x00 } },
			{ { 0xBF, 0x1A, 0x00 }, { 0xCE, 0x1A, 0x00 } },
			{ { 0x34, 0x1B, 0x00 }, { 0x34, 0x1B, 0x00 } },
			{ { 0x44, 0x1B, 0x00 }, { 0x44, 0x1B, 0x00 } },
			{ { 0x6B, 0x1B, 0x00 }, { 0x73, 0x1B, 0x00 } },
			{ { 0xAA, 0x1B, 0x00 }, { 0xAB, 0x1B, 0x00 } },
			{ { 0xE6, 0x1B, 0x00 }, { 0xE6, 0x1B, 0x00 } },
			{ { 0xF2, 0x1B, 0x00 }, { 0xF3, 0x1B, 0x00 } },
			{ { 0x37, 0x1C, 0x00 }, { 0x37, 0x1C, 0x00 } },
			{ { 0xD0, 0x1C, 0x00 }, { 0xD2, 0x1C, 0x00 } },
			{ { 0xD5, 0x1C, 0x00 }, { 0xE0, 0x1C, 0x00 } },
			{ { 0xED, 0x1C, 0x00 }, { 0xED, 0x1C, 0x00 } },
			{ { 0xF4, 0x1C, 0x00 }, { 0xF4, 0x1C, 0x00 } },
			{ { 0xF8, 0x1C, 0x00 }, { 0xF9, 0x1C, 0x00 } },
			{ { 0xC0, 0x1D, 0x00 }, { 0xFF, 0x1D, 0x00 } },
			{ { 0xD0, 0x20, 0x00 }, { 0xD1, 0x20, 0x00 } },
			{ { 0xD4, 0x20, 0x00 }, { 0xD7, 0x20, 0x00 } },
			{ { 0xDB, 0x20, 0x00 }, { 0xDC, 0x20, 0x00 } },
			{ { 0xE1, 0x20, 0x00 }, { 0xE1, 0x20, 0x00 } },
			{ { 0xE7, 0x20, 0x00 }, { 0xE9, 0x20, 0x00 } },
			{ { 0xEC, 0x20, 0x00 }, { 0xF0, 0x20, 0x00 } },
			{ { 0xEF, 0x2C, 0x00 }, { 0xF1, 0x2C, 0x00 } },
			{ { 0x7F, 0x2D, 0x00 }, { 0x7F, 0x2D, 0x00 } },
			{ { 0xE0, 0x2D, 0x00 }, { 0xFF, 0x2D, 0x00 } },
			{ { 0x2A, 0x30, 0x00 }, { 0x2F, 0x30, 0x00 } },
			{ { 0x99, 0x30, 0x00 }, { 0x9A, 0x30, 0x00 } },
			{ { 0x6F, 0xA6, 0x00 }, { 0x6F, 0xA6, 0x00 } },
			{ { 0x74, 0xA6, 0x00 }, { 0x7D, 0xA6, 0x00 } },
			{ { 0x9E, 0xA6, 0x00 }, { 0x9F, 0xA6, 0x00 } },
			{ { 0xF0, 0xA6, 0x00 }, { 0xF1, 0xA6, 0x00 } },
			{ { 0x06, 0xA8, 0x00 }, { 0x06, 0xA8, 0x00 } },
			{ { 0x2C, 0xA8, 0x00 }, { 0x2C, 0xA8, 0x00 } },
			{ { 0xC4, 0xA8, 0x00 }, { 0xC4, 0xA8, 0x00 } },
			{ { 0xE0, 0xA8, 0x00 }, { 0xF1, 0xA8, 0x00 } },
			{ { 0x2B, 0xA9, 0x00 }, { 0x2D, 0xA9, 0x00 } },
			{ { 0x53, 0xA9, 0x00 }, { 0x53, 0xA9, 0x00 } },
			{ { 0xB3, 0xA9, 0x00 }, { 0xB3, 0xA9, 0x00 } },
			{ { 0xC0, 0xA9, 0x00 }, { 0xC0, 0xA9, 0x00 } },
			{ { 0xB0, 0xAA, 0x00 }, { 0xB0, 0xAA, 0x00 } },
			{ { 0xB2, 0xAA, 0x00 }, { 0xB4, 0xAA, 0x00 } },
			{ { 0xB7, 0xAA, 0x00 }, { 0xB8, 0xAA, 0x00 } },
			{ { 0xBE, 0xAA, 0x00 }, { 0xBF, 0xAA, 0x00 } },
			{ { 0xC1, 0xAA, 0x00 }, { 0xC1, 0xAA, 0x00 } },
			{ { 0xF6, 0xAA, 0x00 }, { 0xF6, 0xAA, 0x00 } },
			{ { 0xED, 0xAB, 0x00 }, { 0xED, 0xAB, 0x00 } },
			{ { 0x1E, 0xFB, 0x00 }, { 0x1E, 0xFB, 0x00 } },
			{ { 0x20, 0xFE, 0x00 }, { 0x2F, 0xFE, 0x00 } },
			{ { 0x1B, 0x01, 0x01 }, { 0x1B, 0x01, 0x01 } },
			{ { 0x6B, 0x01, 0x01 }, { 0x6B, 0x01, 0x01 } },
			{ { 0xFD, 0x01, 0x01 }, { 0xFD, 0x01, 0x01 } },
			{ { 0xE0, 0x02, 0x01 }, { 0xE0, 0x02, 0x01 } },
			{ { 0xF5, 0x02, 0x01 }, { 0xF5, 0x02, 0x01 } },
			{ { 0x76, 0x03, 0x01 }, { 0x7A, 0x03, 0x01 } },
			{ { 0xD4, 0x09, 0x01 }, { 0xD4, 0x09, 0x01 } },
			{ { 0x0D, 0x0A, 0x01 }, { 0x0D, 0x0A, 0x01 } },
			{ { 0x0F, 0x0A, 0x01 }, { 0x0F, 0x0A, 0x01 } },
			{ { 0x38, 0x0A, 0x01 }, { 0x38, 0x0A, 0x01 } },
			{ { 0x3A, 0x0A, 0x01 }, { 0x3A, 0x0A, 0x01 } },
			{ { 0x3F, 0x0A, 0x01 }, { 0x3F, 0x0A, 0x01 } },
			{ { 0xE5, 0x0A, 0x01 }, { 0xE6, 0x0A, 0x01 } },
			{ { 0x24, 0x0D, 0x01 }, { 0x27, 0x0D, 0x01 } },
			{ { 0x74, 0x0E, 0x01 }, { 0x74, 0x0E, 0x01 } },
			{ { 0xAB, 0x0E, 0x01 }, { 0xAC, 0x0E, 0x01 } },
			{ { 0xFD, 0x0E, 0x01 }, { 0xFF, 0x0E, 0x01 } },
			{ { 0x46, 0x0F, 0x01 }, { 0x50, 0x0F, 0x01 } },
			{ { 0x82, 0x0F, 0x01 }, { 0x85, 0x0F, 0x01 } },
			{ { 0x46, 0x10, 0x01 }, { 0x46, 0x10, 0x01 } },
			{ { 0x70, 0x10, 0x01 }, { 0x70, 0x10, 0x01 } },
			{ { 0x7F, 0x10, 0x01 }, { 0x7F, 0x10, 0x01 } },
			{ { 0xB9, 0x10, 0x01 }, { 0xBA, 0x10, 0x01 } },
			{ { 0x00, 0x11, 0x01 }, { 0x02, 0x11, 0x01 } },
			{ { 0x33, 0x11, 0x01 }, { 0x34, 0x11, 0x01 } },
			{ { 0x73, 0x11, 0x01 }, { 0x73, 0x11, 0x01 } },
			{ { 0xC0, 0x11, 0x01 }, { 0xC0, 0x11, 0x01 } },
			{ { 0xCA, 0x11, 0x01 }, { 0xCA, 0x11, 0x01 } },
			{ { 0x35, 0x12, 0x01 }, { 0x36, 0x12, 0x01 } },
			{ { 0xE9, 0x12, 0x01 }, { 0xEA, 0x12, 0x01 } },
			{ { 0x3B, 0x13, 0x01 }, { 0x3C, 0x13, 0x01 } },
			{ { 0x4D, 0x13, 0x01 }, { 0x4D, 0x13, 0x01 } },
			{ { 0x66, 0x13, 0x01 }, { 0x6C, 0x13, 0x01 } },
			{ { 0x70, 0x13, 0x01 }, { 0x74, 0x13, 0x01 } },
			{ { 0x42, 0x14, 0x01 }, { 0x42, 0x14, 0x01 } },
			{ { 0x46, 0x14, 0x01 }, { 0x46, 0x14, 0x01 } },
			{ { 0x5E, 0x14, 0x01 }, { 0x5E, 0x14, 0x01 } },
			{ { 0xC2, 0x14, 0x01 }, { 0xC3, 0x14, 0x01 } },
			{ { 0xBF, 0x15, 0x01 }, { 0xC0, 0x15, 0x01 } },
			{ { 0x3F, 0x16, 0x01 }, { 0x3F, 0x16, 0x01 } },
			{ { 0xB6, 0x16, 0x01 }, { 0xB7, 0x16, 0x01 } },
			{ { 0x2B, 0x17, 0x01 }, { 0x2B, 0x17, 0x01 } },
			{ { 0x39, 0x18, 0x01 }, { 0x3A, 0x18, 0x01 } },
			{ { 0x3D, 0x19, 0x01 }, { 0x3E, 0x19, 0x01 } },
			{ { 0x43, 0x19, 0x01 }, { 0x43, 0x19, 0x01 } },
			{ { 0xE0, 0x19, 0x01 }, { 0xE0, 0x19, 0x01 } },
			{ { 0x34, 0x1A, 0x01 }, { 0x34, 0x1A, 0x01 } },
			{ { 0x47, 0x1A, 0x01 }, { 0x47, 0x1A, 0x01 } },
			{ { 0x99, 0x1A, 0x01 }, { 0x99, 0x1A, 0x01 } },
			{ { 0x3F, 0x1C, 0x01 }, { 0x3F, 0x1C, 0x01 } },
			{ { 0x42, 0x1D, 0x01 }, { 0x42, 0x1D, 0x01 } },
			{ { 0x44, 0x1D, 0x01 }, { 0x45, 0x1D, 0x01 } },
			{ { 0x97, 0x1D, 0x01 }, { 0x97, 0x1D, 0x01 } },
			{ { 0x41, 0x1F, 0x01 }, { 0x42, 0x1F, 0x01 } },
			{ { 0x30, 0x6B, 0x01 }, { 0x36, 0x6B, 0x01 } },
			{ { 0xF0, 0x6F, 0x01 }, { 0xF1, 0x6F, 0x01 } },
			{ { 0x65, 0xD1, 0x01 }, { 0x66, 0xD1, 0x01 } },
			{ { 0x6D, 0xD1, 0x01 }, { 0x72, 0xD1, 0x01 } },
			{ { 0x7B, 0xD1, 0x01 }, { 0x82, 0xD1, 0x01 } },
			{ { 0x85, 0xD1, 0x01 }, { 0x8B, 0xD1, 0x01 } },
			{ { 0xAA, 0xD1, 0x01 }, { 0xAD, 0xD1, 0x01 } },
			{ { 0x42, 0xD2, 0x01 }, { 0x44, 0xD2, 0x01 } },
			{ { 0x00, 0xE0, 0x01 }, { 0x06, 0xE0, 0x01 } },
			{ { 0x08, 0xE0, 0x01 }, { 0x18, 0xE0, 0x01 } },
			{ { 0x1B, 0xE0, 0x01 }, { 0x21, 0xE0, 0x01 } },
			{ { 0x23, 0xE0, 0x01 }, { 0x24, 0xE0, 0x01 } },
			{ { 0x26, 0xE0, 0x01 }, { 0x2A, 0xE0, 0x01 } },
			{ { 0x8F, 0xE0, 0x01 }, { 0x8F, 0xE0, 0x01 } },
			{ { 0x30, 0xE1, 0x01 }, { 0x36, 0xE1, 0x01 } },
			{ { 0xAE, 0xE2, 0x01 }, { 0xAE, 0xE2, 0x01 } },
			{ { 0xEC, 0xE2, 0x01 }, { 0xEF, 0xE2, 0x01 } },
			{ { 0xEC, 0xE4, 0x01 }, { 0xEF, 0xE4, 0x01 } },
			{ { 0xD0, 0xE8, 0x01 }, { 0xD6, 0xE8, 0x01 } },
			{ { 0x44, 0xE9, 0x01 }, { 0x4A, 0xE9, 0x01 } },
			{ { 0x85, 0xEC, 0x01 }, { 0x85, 0xEC, 0x01 } },
			{ { 0x15, 0xED, 0x01 }, { 0x15, 0xED, 0x01 } },
		}

		return SOLIDUS_TRANSPARENT
	end
	function __DARKLUA_BUNDLE_MODULES.b()
		local WIDTH_ROOT = {
			0x00,
			0x01,
			0x02,
			0x03,
			0x03,
			0x04,
			0x05,
			0x06,
			0x07,
			0x08,
			0x09,
			0x0A,
			0x0B,
			0x0C,
			0x0D,
			0x0E,

			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x0F,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x0F,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x10,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
		}

		local WIDTH_MIDDLE = {
			{
				0x00,
				0x01,
				0x02,
				0x02,
				0x02,
				0x02,
				0x03,
				0x02,
				0x02,
				0x04,
				0x02,
				0x05,
				0x06,
				0x07,
				0x08,

				0x09,
				0x0A,
				0x0B,
				0x0C,
				0x0D,
				0x0E,
				0x0F,
				0x10,
				0x11,
				0x12,
				0x13,
				0x14,
				0x15,
				0x16,
				0x17,

				0x18,
				0x19,
				0x1A,
				0x1B,
				0x1C,
				0x1D,
				0x02,
				0x02,
				0x1E,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x1F,
				0x20,
				0x21,
				0x22,
				0x23,
				0x02,
				0x24,
				0x25,
				0x26,
				0x27,
				0x28,
				0x29,
				0x02,
				0x2A,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x2B,
				0x2C,
				0x02,
				0x02,
				0x02,
				0x02,
				0x2D,
				0x2E,
				0x02,
				0x02,
				0x02,
				0x2F,
				0x30,
				0x31,
				0x32,

				0x33,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x34,
				0x02,
				0x02,
				0x35,
				0x36,
				0x37,
				0x02,
				0x38,

				0x39,
				0x3A,
				0x3B,
				0x3C,
				0x3D,
				0x3E,
				0x3F,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
			},
			{
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x40,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
			},
			{
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
			},
			{
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x41,
				0x02,
				0x02,
				0x42,
				0x43,
				0x02,

				0x02,
				0x44,
				0x45,
				0x46,
				0x47,
				0x48,
				0x49,
				0x02,
				0x4A,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
			},
			{
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x4B,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x39,
				0x39,
				0x39,
				0x39,
				0x4C,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x4D,
				0x4E,
				0x4F,
				0x50,
			},
			{
				0x02,
				0x02,
				0x02,
				0x51,
				0x02,
				0x52,
				0x53,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x54,
				0x55,
				0x02,
				0x02,
				0x56,
				0x02,
				0x57,
				0x02,
				0x02,
				0x58,

				0x59,
				0x5A,
				0x5B,
				0x5C,
				0x5D,
				0x5E,
				0x5F,
				0x60,
				0x61,
				0x02,
				0x62,
				0x63,
				0x02,
				0x64,
				0x65,

				0x66,
				0x67,
				0x02,
				0x68,
				0x02,
				0x69,
				0x6A,
				0x6B,
				0x6C,
				0x02,
				0x02,
				0x6D,
				0x6E,
				0x6F,
				0x70,

				0x02,
				0x71,
				0x72,
				0x02,
			},
			{
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x73,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x74,
				0x75,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x76,
				0x77,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
			},
			{
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x78,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x79,
				0x7A,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x7B,
				0x39,
				0x39,
				0x7C,
				0x39,
				0x39,
				0x7D,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x7E,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x7F,
				0x02,
				0x02,
				0x02,
				0x80,
				0x81,
				0x82,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x83,
				0x84,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x85,
				0x86,
				0x75,
				0x02,
				0x02,
				0x87,
				0x02,
				0x02,
				0x02,
				0x88,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x89,
				0x8A,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x8B,
				0x8C,
				0x02,
				0x8D,
				0x8E,
				0x02,
				0x8F,
				0x90,
				0x91,
				0x92,
				0x93,
				0x94,
				0x95,

				0x96,
				0x02,
				0x97,
				0x02,
				0x02,
				0x98,
				0x99,
				0x9A,
				0x9B,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
			{
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x9C,
			},
			{
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,

				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,
				0x1D,

				0x1D,
				0x1D,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			},
		}

		if _G.UNICODE_WIDTH_CJK ~= false then
			table.insert(WIDTH_MIDDLE, {
				0x00,
				0x9D,
				0x02,
				0x02,
				0x02,
				0x02,
				0x9E,
				0x9F,
				0x02,
				0x04,
				0x02,
				0x05,
				0x06,
				0x07,
				0x08,

				0x09,
				0x0A,
				0x0B,
				0x0C,
				0x0D,
				0x0E,
				0x0F,
				0x10,
				0x11,
				0x12,
				0x13,
				0x14,
				0x15,
				0x16,
				0x17,

				0x18,
				0x19,
				0x1A,
				0x1B,
				0x1C,
				0x1D,
				0x02,
				0x02,
				0x1E,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x1F,
				0x20,
				0x21,
				0x22,
				0x23,
				0x02,
				0x24,
				0x25,
				0x26,
				0x27,
				0x28,
				0x29,
				0x02,
				0x2A,

				0x02,
				0x02,
				0x02,
				0x02,
			})

			table.insert(WIDTH_MIDDLE, {
				0xA0,
				0xA1,
				0xA2,
				0xA3,
				0xA4,
				0xA5,
				0xA6,
				0x2E,
				0xA7,
				0xA8,
				0xA9,
				0xAA,
				0xAB,
				0xAC,
				0xAD,

				0x33,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0xAE,
				0x02,
				0x02,
				0x35,
				0x36,
				0x37,
				0x02,
				0x38,

				0x39,
				0x3A,
				0x3B,
				0x3C,
				0x3D,
				0x3E,
				0xAF,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
			})

			table.insert(WIDTH_MIDDLE, {

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,

				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x39,
				0x4C,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0xB0,
				0x4E,
				0x4F,
				0xB1,
			})

			table.insert(WIDTH_MIDDLE, {

				0x85,
				0x86,
				0x75,
				0x02,
				0x02,
				0x87,
				0x02,
				0x02,
				0x02,
				0x88,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x89,
				0x8A,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x8B,
				0x8C,
				0xB2,
				0xB3,
				0x8E,
				0x02,
				0x8F,
				0x90,
				0x91,
				0x92,
				0x93,
				0x94,
				0x95,

				0x96,
				0x02,
				0x97,
				0x02,
				0x02,
				0x98,
				0x99,
				0x9A,
				0x9B,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,

				0x02,
				0x02,
				0x02,
				0x02,
			})
		end

		local WIDTH_LEAVES = {
			{
				0x55,
				0x55,
				0x75,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x51,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x15,
				0x00,
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x10,
				0x41,
				0x10,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x51,
				0x55,
				0x55,
				0x00,
				0x00,
				0x40,
				0x54,
				0xF5,
				0xDD,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0xFC,
				0x5D,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x00,
				0x14,
				0x00,
				0x14,
				0x04,
				0x50,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x15,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xD5,
				0x57,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x00,
				0x00,
				0x54,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x00,
				0x55,

				0x55,
				0x51,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x10,
				0x00,
				0x00,
				0x01,
				0x01,
				0x50,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
			},
			{
				0x7F,
				0x55,
				0x55,
				0x55,
				0x50,
				0x55,
				0x00,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x05,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
			},
			{
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x45,

				0x54,
				0x01,
				0x00,
				0x54,
				0x51,
				0x01,
				0x00,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x44,
				0x01,
				0x54,
				0x55,
				0x51,
				0x55,
				0x15,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x45,
			},
			{
				0x41,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x54,
				0x41,
				0x15,
				0x14,
				0x50,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x50,
				0x51,

				0x55,
				0x55,
			},
			{
				0x41,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x54,
				0x01,
				0x10,
				0x54,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x05,
				0x00,
			},
			{
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x04,
				0x01,
				0x54,
				0x55,
				0x51,
				0x55,
				0x01,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x45,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x45,
				0x54,
				0x55,
				0x55,
				0x51,
				0x55,
				0x15,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x54,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x04,
				0x54,
				0x05,
				0x04,
				0x50,
				0x55,
				0x41,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x14,
				0x44,
				0x05,
				0x04,
				0x50,
				0x55,
				0x41,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,

				0x44,
				0x01,
				0x54,
				0x55,
				0x41,
				0x55,
				0x15,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x45,
				0x15,
				0x05,
				0x44,
				0x55,
				0x15,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x51,
				0x00,
				0x40,

				0x55,
				0x55,
				0x15,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x51,
				0x00,
				0x00,

				0x54,
				0x55,
				0x55,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x11,
				0x51,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x00,

				0x00,
				0x40,
			},
			{
				0x00,
				0x04,
				0x55,
				0x01,
				0x00,
				0x00,
				0x01,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x54,
				0x55,
				0x45,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x04,
				0x00,
				0x41,

				0x41,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x50,
				0x05,
				0x54,
				0x55,
				0x55,
				0x55,
				0x01,
				0x54,

				0x55,
				0x55,
			},
			{
				0x45,
				0x41,
				0x55,
				0x51,
				0x55,
				0x55,
				0x55,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x55,

				0x55,
				0x55,
			},
			{
				0x7F,
				0xFF,
				0xFD,
				0xF7,
				0xFF,
				0xFD,
				0xD7,
				0x5F,
				0x77,
				0xD6,
				0xD5,
				0xD7,
				0x55,
				0x10,
				0x00,

				0x50,
				0x55,
				0x45,
				0x01,
				0x00,
				0x00,
				0x55,
				0x57,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x15,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x41,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x40,
				0x15,
				0x54,
				0x55,
				0x45,
				0x55,
				0x01,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x57,
				0x15,
				0x14,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x45,
				0x00,
				0x40,
				0x44,
				0x01,
				0x00,
				0x54,
				0x15,
				0x00,

				0x00,
				0x14,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,

				0x50,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x00,
				0x55,

				0x55,
				0x55,
			},
			{
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x50,
				0x10,
				0x50,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x45,
				0x50,
				0x11,
				0x50,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x05,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x40,
				0x00,
				0x00,
				0x00,
				0x04,
				0x00,
				0x54,
				0x51,
				0x55,
				0x54,

				0x50,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
			},
			{
				0x55,
				0x55,
				0x15,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x40,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x54,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xF5,
				0x55,
				0x55,
				0x55,
				0x69,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xFD,
				0x57,
				0xD7,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x7D,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x5F,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0xFF,
				0xFF,
				0xFF,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0xD5,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0xD5,
				0x55,
				0x55,
				0x55,
				0x5D,
				0x55,
				0xF5,
				0x55,
				0x55,
				0x55,
				0x55,

				0x7D,
				0x55,
				0x5F,
				0x55,
				0x75,
				0x55,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,
				0x75,
				0x55,
				0xF5,
				0x5D,

				0x75,
				0x5D,
			},
			{
				0x55,
				0x5D,
				0xF5,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x77,
				0xD5,
				0xDF,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xFD,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x57,
				0x55,
				0x55,

				0xD5,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xD5,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x57,
				0x5D,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x50,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xFD,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0x5F,
				0x55,
				0xD5,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x9A,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x55,

				0x55,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x5A,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x0A,
				0x00,
				0xAA,
				0xAA,
				0xAA,

				0x6A,
				0xA9,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0x81,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0x55,
				0xA9,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xA9,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xA8,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x55,
				0x55,
				0x95,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0x55,
				0x55,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0x56,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0x6A,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x5F,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x40,
				0x00,

				0x00,
				0x50,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x50,
				0x55,

				0x55,
				0x55,
			},
			{
				0x45,
				0x45,
				0x15,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x41,
				0x55,
				0x54,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x50,
				0x55,

				0x45,
				0x15,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x00,
				0x50,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x15,
				0x00,
				0x00,
				0x50,
				0x55,
				0x55,
				0x55,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0x56,
			},
			{
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x05,
				0x50,

				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x40,
				0x41,
				0x41,
				0x55,

				0x55,
				0x15,
				0x55,
				0x55,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x54,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x04,
				0x14,
				0x54,

				0x05,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x50,
				0x55,
				0x45,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x51,
				0x54,
				0x51,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x40,
				0x15,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x45,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x00,
				0x00,
				0x00,
				0xF0,
				0xAA,
				0xAA,
				0x5A,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0xAA,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x15,
			},
			{
				0xA9,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x56,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xAA,
				0x6A,
				0x55,
				0x55,
				0x00,
				0x00,

				0x54,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x51,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,

				0x40,
				0x55,
			},
			{
				0x01,
				0x41,
				0x55,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x40,

				0x15,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x41,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0xD5,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x54,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x01,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x05,
				0x00,
				0x00,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x05,
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,

				0x00,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x14,
				0x54,

				0x55,
				0x15,
			},
			{
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x40,
				0x41,

				0x55,
				0x45,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x01,
				0x00,
				0x54,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x55,

				0x55,
				0x55,
			},
			{
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x00,

				0x40,
				0x05,
				0x55,
				0x01,
				0x14,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x50,
				0x04,
				0x55,

				0x45,
				0x51,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x15,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,

				0x44,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x55,
				0x55,
				0x55,
				0x05,
				0x00,
				0x54,
				0x00,
				0x54,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,

				0x00,
				0x05,
				0x44,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x45,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x14,
				0x00,
				0x44,

				0x11,
				0x04,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x05,
				0x50,
				0x55,

				0x10,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x40,

				0x11,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x51,
				0x00,
				0x10,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x05,
				0x10,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x00,
				0x41,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x54,
				0x55,
				0x15,

				0x04,
				0x11,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x05,
				0x55,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x01,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x04,

				0x40,
				0x55,
				0x15,
				0x55,
				0x55,
				0x01,
				0x40,
				0x01,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x40,
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x40,
				0x00,

				0x10,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x05,
				0x00,
				0x04,
				0x41,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x01,
				0x40,
				0x45,

				0x10,
				0x00,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x50,
				0x11,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x54,

				0x55,
				0x55,
			},
			{
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x40,

				0x55,
				0x44,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x54,
				0x15,
				0x00,
				0x00,
				0x00,
				0x50,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x54,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x40,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x15,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xAA,
				0x54,
				0x55,
				0x55,
				0x5A,
				0x55,

				0x55,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0x55,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x5A,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0x56,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xAA,
				0xA9,

				0xAA,
				0x69,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0x55,
				0x55,
				0x55,
				0x65,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x6A,
				0x59,
				0x55,
				0x55,
				0x55,
				0xAA,
				0x55,
				0x55,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x41,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x50,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x11,
				0x50,
				0x05,
				0x00,
				0x00,

				0x00,
				0x00,
			},
			{
				0x40,
				0x01,
				0x00,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x50,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x05,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x40,
				0x15,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x54,
				0x55,
				0x51,

				0x55,
				0x55,
			},
			{
				0x55,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x15,
				0x00,
				0x01,
				0x00,
				0x00,
				0x00,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x00,
				0x40,
				0x00,
				0x00,
				0x00,
				0x00,
				0x14,
				0x00,
				0x10,
				0x04,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x15,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x45,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x00,
				0x40,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0xD5,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x75,
				0xFD,
				0xFF,
				0x7F,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xF5,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
			},
			{
				0x6E,
				0x55,
				0x55,
				0x55,
				0xAA,
				0xAA,
				0xBA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xEA,
				0xFA,
				0xBF,
				0xBF,

				0x55,
				0xAA,
				0xAA,
				0x56,
				0x55,
				0x5F,
				0x55,
				0x55,
				0x55,
				0xAA,
				0x5A,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0x57,
				0x55,
				0x55,
				0xFD,
				0xFF,
				0xDF,
				0xFF,

				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xF7,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0x55,
				0x55,
				0x55,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
				0xFF,
				0x7F,
				0xD5,
				0xFF,
				0x55,
				0x55,
				0x55,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0x57,
				0x57,

				0xFF,
				0xFF,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0x7F,
				0xF7,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xD7,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0x5F,
				0x55,
				0x55,
				0xD5,
				0x7F,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0x55,
				0x55,
				0x55,
				0x55,

				0x75,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x7D,
				0x55,
				0x55,
				0x55,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0xD5,
				0xFF,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
				0x5F,
				0x55,
				0x57,
				0x7F,
				0xFD,
				0x55,
				0xFF,
				0x55,
				0x55,
				0xD5,
				0x57,
				0x55,
				0xFF,

				0xFF,
				0x57,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xFF,
				0xFF,
				0xFF,
				0x55,
				0x57,
				0x55,

				0x55,
				0x55,
			},
			{
				0x55,
				0x55,
				0x55,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0x7F,

				0xFF,
				0xFF,
				0xDF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
			},
			{
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
			},
			{
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xFF,
				0xFF,

				0xFF,
				0x57,
			},
			{
				0xFF,
				0xFF,
				0x57,
				0x55,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xDF,
				0xFF,
				0x5F,
				0x55,
				0xF5,
				0xFF,
				0xFF,
				0xFF,
				0x55,
				0xFF,
				0xFF,
				0x57,
				0x55,
				0xFF,
				0xFF,

				0x57,
				0x55,
			},
			{
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0x5A,
			},
		}

		if _G.UNICODE_WIDTH_CJK ~= false then
			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x59,
				0x96,
				0x55,
				0x61,
				0xAA,
				0xA5,
				0x59,

				0xAA,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x95,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x95,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x03,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x55,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x95,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x15,
				0x00,
				0x96,
				0x6A,
				0x5A,
				0x5A,
				0x6A,
				0xAA,
				0x05,
				0x40,
				0xA6,
				0x59,
				0x95,

				0x65,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x55,
				0x56,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0xA9,
				0x56,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x56,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x54,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x95,
				0x59,
				0x59,
				0x55,
				0x55,
				0x65,
				0x55,
				0x55,
				0x69,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x95,
				0x56,
				0x95,
				0x6A,
				0xAA,
				0xAA,
				0xAA,
				0x55,
				0xAA,
				0xAA,

				0x5A,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x59,
				0x55,
				0xAA,
				0xAA,
				0xAA,
				0x55,
				0x55,
				0x55,
				0x55,
				0x65,
				0x55,
				0x55,
				0x5A,

				0x55,
				0x55,
				0x55,
				0x55,
				0xA5,
				0x65,
				0x56,
				0x55,
				0x55,
				0x55,
				0x95,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0xA6,
				0x96,
				0x9A,
				0x96,
				0x59,
				0x59,
				0x65,
				0xA9,
				0x96,
				0xAA,
				0xAA,
				0x66,
				0x55,
				0xAA,
				0x55,

				0x5A,
				0x59,
				0x55,
				0x5A,
				0x56,
				0x65,
				0x55,
				0x55,
				0x55,
				0x6A,
				0xAA,
				0xA5,
				0xA5,
				0x5A,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0xA5,
				0xAA,
				0x5A,
				0x55,
				0x55,
				0x59,
				0x59,
				0x55,
				0x55,
				0x59,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x95,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x55,
				0x55,
				0x65,
				0x55,
				0xF5,
				0x55,
				0x55,
				0x55,
				0x69,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			})

			table.insert(WIDTH_LEAVES, {
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x9A,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			})

			table.insert(WIDTH_LEAVES, {
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x55,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xA5,
				0x5A,
				0x55,
				0x55,
				0x9A,
				0xAA,
				0x5A,
				0x55,
				0xA5,
				0xA5,
				0x55,

				0x5A,
				0x5A,
				0xA5,
				0x96,
				0xA5,
				0x5A,
				0x55,
				0x55,
				0x55,
				0xA5,
				0x5A,
				0x55,
				0x95,
				0x55,
				0x55,

				0x55,
				0x7D,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x69,
				0x59,
				0xA5,
				0x55,
				0x5F,
				0x55,
				0x66,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x66,
				0x55,
				0xFF,
				0xFF,
				0xFF,
				0x55,
				0x55,
				0x55,
				0x9A,
				0x9A,
				0x6A,
				0x9A,
				0x55,
				0x55,

				0x55,
				0xD5,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x55,
				0x55,
				0xD5,
				0x55,
				0x55,
				0xA5,
				0x5D,
				0x55,
				0xF5,
				0x55,
				0x55,
				0x55,
				0x55,

				0xBD,
				0x55,
				0xAF,
				0xAA,
				0xBA,
				0xAA,
				0xAB,
				0xAA,
				0xAA,
				0x9A,
				0x55,
				0xBA,
				0xAA,
				0xFA,
				0xAE,

				0xBA,
				0xAE,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x5D,
				0xF5,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,

				0x59,
				0x55,
				0x55,
				0x55,
				0x77,
				0xD5,
				0xDF,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xA5,

				0xAA,
				0xAA,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xD5,
				0x57,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x57,
				0xAD,
				0x5A,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			})

			table.insert(WIDTH_LEAVES, {
				0x00,
				0x00,
				0x00,
				0xC0,
				0xAA,
				0xAA,
				0x5A,
				0x55,
				0x00,
				0x00,
				0x00,
				0x00,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x6A,
				0xAA,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
			})

			table.insert(WIDTH_LEAVES, {
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x05,
				0x54,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xAA,
				0x6A,
				0x55,
				0x55,
				0x00,
				0x00,

				0x54,
				0x59,
			})

			table.insert(WIDTH_LEAVES, {
				0xAA,
				0xAA,
				0x6A,
				0x55,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x5A,
				0xAA,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x5A,
				0x55,
				0xAA,
				0xAA,

				0xAA,
				0xAA,
			})

			table.insert(WIDTH_LEAVES, {
				0xAA,
				0xAA,
				0xAA,
				0xBA,
				0xFE,
				0xFF,
				0xBF,
				0xAA,
				0xAA,
				0xAA,
				0xAA,
				0x56,
				0x55,
				0x55,
				0x55,

				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0x55,
				0xF5,
				0xFF,
				0xFF,
				0xFF,
				0xFF,

				0xFF,
				0xFF,
			})
		end

		return {
			ROOT = WIDTH_ROOT,
			MIDDLE = WIDTH_MIDDLE,
			LEAVES = WIDTH_LEAVES,
		}
	end
	function __DARKLUA_BUNDLE_MODULES.c()
		local WIDTH_ROOT_CJK = {
			0x11,
			0x12,
			0x02,
			0x03,
			0x03,
			0x04,
			0x05,
			0x13,
			0x07,
			0x08,
			0x09,
			0x0A,
			0x0B,
			0x0C,
			0x0D,
			0x14,

			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x0F,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x0F,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,

			0x10,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x09,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x0F,

			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x03,
			0x0F,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,

			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
			0x00,
		}

		return {
			ROOT_CJK = WIDTH_ROOT_CJK,
		}
	end
	function __DARKLUA_BUNDLE_MODULES.d()
		local DEFAULT = 0
		local LINE_FEED = 0b0000000000000001
		local EMOJI_MODIFIER = 0b0000000000000010
		local REGIONAL_INDICATOR = 0b0000000000000011
		local SEVERAL_REGIONAL_INDICATOR = 0b0000000000000100
		local EMOJI_PRESENTATION = 0b0000000000000101
		local ZWJ_EMOJI_PRESENTATION = 0b0001000000000110
		local VS16_ZWJ_EMOJI_PRESENTATION = 0b1001000000000110
		local KEYCAP_ZWJ_EMOJI_PRESENTATION = 0b0001000000000111
		local VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION = 0b1001000000000111
		local REGIONAL_INDICATOR_ZWJ_PRESENTATION = 0b0000000000001001
		local EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION = 0b0000000000001010
		local ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION = 0b0000000000001011
		local TAG_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000010000
		local TAG_D1_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000010001
		local TAG_D2_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000010010
		local TAG_D3_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000010011
		local TAG_A1_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000011001
		local TAG_A2_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000011010
		local TAG_A3_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000011011
		local TAG_A4_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000011100
		local TAG_A5_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000011101
		local TAG_A6_END_ZWJ_EMOJI_PRESENTATION = 0b0000000000011110
		local VARIATION_SELECTOR_15 = 0b0100000000000000
		local VARIATION_SELECTOR_16 = 0b1000000000000000
		local JOINING_GROUP_ALEF = 0b0011000011111111
		local COMBINING_LONG_SOLIDUS_OVERLAY = if _G.UNICODE_WIDTH_CJK ~= false
			then 0b0011110011111111
			else nil
		local SOLIDUS_OVERLAY_ALEF = if _G.UNICODE_WIDTH_CJK ~= false then 0b0011100011111111 else nil
		local HEBREW_LETTER_LAMED = 0b0011100000000000
		local ZWJ_HEBREW_LETTER_LAMED = 0b0011110000000000
		local BUGINESE_LETTER_YA = 0b0011100000000001
		local ZWJ_BUGINESE_LETTER_YA = 0b0011110000000001
		local BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA = 0b0011110000000010
		local TIFINAGH_CONSONANT = 0b0011100000000011
		local ZWJ_TIFINAGH_CONSONANT = 0b0011110000000011
		local TIFINAGH_JOINER_CONSONANT = 0b0011110000000100
		local LISU_TONE_LETTER_MYA_NA_JEU = 0b0011110000000101
		local OLD_TURKIC_LETTER_ORKHON_I = 0b0011100000000110
		local ZWJ_OLD_TURKIC_LETTER_ORKHON_I = 0b0011110000000110
		local KHMER_COENG_ELIGIBLE_LETTER = 0b0011110000000111

		local function isLigatureTransparent(self)
			return bit32.band(self, 0b0000_1000_0000_0000) == 0b0000_1000_0000_0000
		end

		local function setZwjBit(self)
			return bit32.bor(self, 0b0000_0100_0000_0000)
		end

		local function isEmojiPresentation(self)
			return bit32.band(self, 0b1000_0000_0000_0000) == 0b1000_0000_0000_0000
		end

		local function isZwjEmojiPresentation(self)
			return bit32.band(self, 0b1011_0000_0000_0000) == 0b1001_0000_0000_0000
		end

		local function setEmojiPresentation(self)
			if
				bit32.band(self, 0b0010_0000_0000_0000) == 0b0010_0000_0000_0000
				or bit32.band(self, 0b1001_0000_0000_0000) == 0b0001_0000_0000_0000
			then
				return bit32.bor(self, 0b1000_0000_0000_0000)
			else
				return VARIATION_SELECTOR_16
			end
		end

		local function unsetEmojiPresentation(self)
			if bit32.band(self, 0b0010_0000_0000_0000) == 0b0010_0000_0000_0000 then
				return bit32.band(self, 0b0111_1111_1111_1111)
			else
				return DEFAULT
			end
		end

		local function isTextPresentation(self)
			return bit32.band(self, 0b0100_0000_0000_0000) == 0b0100_0000_0000_0000
		end

		local function setTextPresentation(self)
			if bit32.band(self, 0b0010_0000_0000_0000) == 0b0010_0000_0000_0000 then
				return bit32.bor(self, 0b0100_0000_0000_0000)
			else
				return 0b0100_0000_0000_0000
			end
		end

		local function unsetTextPresentation(self)
			return bit32.band(self, 0b1011_1111_1111_1111)
		end

		return {
			DEFAULT = DEFAULT,
			LINE_FEED = LINE_FEED,
			EMOJI_MODIFIER = EMOJI_MODIFIER,
			REGIONAL_INDICATOR = REGIONAL_INDICATOR,
			SEVERAL_REGIONAL_INDICATOR = SEVERAL_REGIONAL_INDICATOR,
			EMOJI_PRESENTATION = EMOJI_PRESENTATION,
			ZWJ_EMOJI_PRESENTATION = ZWJ_EMOJI_PRESENTATION,
			VS16_ZWJ_EMOJI_PRESENTATION = VS16_ZWJ_EMOJI_PRESENTATION,
			KEYCAP_ZWJ_EMOJI_PRESENTATION = KEYCAP_ZWJ_EMOJI_PRESENTATION,
			VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION = VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION,
			REGIONAL_INDICATOR_ZWJ_PRESENTATION = REGIONAL_INDICATOR_ZWJ_PRESENTATION,
			EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION = EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION,
			ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION = ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION,
			TAG_END_ZWJ_EMOJI_PRESENTATION = TAG_END_ZWJ_EMOJI_PRESENTATION,
			TAG_D1_END_ZWJ_EMOJI_PRESENTATION = TAG_D1_END_ZWJ_EMOJI_PRESENTATION,
			TAG_D2_END_ZWJ_EMOJI_PRESENTATION = TAG_D2_END_ZWJ_EMOJI_PRESENTATION,
			TAG_D3_END_ZWJ_EMOJI_PRESENTATION = TAG_D3_END_ZWJ_EMOJI_PRESENTATION,
			TAG_A1_END_ZWJ_EMOJI_PRESENTATION = TAG_A1_END_ZWJ_EMOJI_PRESENTATION,
			TAG_A2_END_ZWJ_EMOJI_PRESENTATION = TAG_A2_END_ZWJ_EMOJI_PRESENTATION,
			TAG_A3_END_ZWJ_EMOJI_PRESENTATION = TAG_A3_END_ZWJ_EMOJI_PRESENTATION,
			TAG_A4_END_ZWJ_EMOJI_PRESENTATION = TAG_A4_END_ZWJ_EMOJI_PRESENTATION,
			TAG_A5_END_ZWJ_EMOJI_PRESENTATION = TAG_A5_END_ZWJ_EMOJI_PRESENTATION,
			TAG_A6_END_ZWJ_EMOJI_PRESENTATION = TAG_A6_END_ZWJ_EMOJI_PRESENTATION,
			VARIATION_SELECTOR_15 = VARIATION_SELECTOR_15,
			VARIATION_SELECTOR_16 = VARIATION_SELECTOR_16,
			JOINING_GROUP_ALEF = JOINING_GROUP_ALEF,
			COMBINING_LONG_SOLIDUS_OVERLAY = COMBINING_LONG_SOLIDUS_OVERLAY,
			SOLIDUS_OVERLAY_ALEF = SOLIDUS_OVERLAY_ALEF,
			HEBREW_LETTER_LAMED = HEBREW_LETTER_LAMED,
			ZWJ_HEBREW_LETTER_LAMED = ZWJ_HEBREW_LETTER_LAMED,
			BUGINESE_LETTER_YA = BUGINESE_LETTER_YA,
			ZWJ_BUGINESE_LETTER_YA = ZWJ_BUGINESE_LETTER_YA,
			BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA = BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA,
			TIFINAGH_CONSONANT = TIFINAGH_CONSONANT,
			ZWJ_TIFINAGH_CONSONANT = ZWJ_TIFINAGH_CONSONANT,
			TIFINAGH_JOINER_CONSONANT = TIFINAGH_JOINER_CONSONANT,
			LISU_TONE_LETTER_MYA_NA_JEU = LISU_TONE_LETTER_MYA_NA_JEU,
			OLD_TURKIC_LETTER_ORKHON_I = OLD_TURKIC_LETTER_ORKHON_I,
			ZWJ_OLD_TURKIC_LETTER_ORKHON_I = ZWJ_OLD_TURKIC_LETTER_ORKHON_I,
			KHMER_COENG_ELIGIBLE_LETTER = KHMER_COENG_ELIGIBLE_LETTER,

			isLigatureTransparent = isLigatureTransparent,
			isEmojiPresentation = isEmojiPresentation,
			isZwjEmojiPresentation = isZwjEmojiPresentation,
			setEmojiPresentation = setEmojiPresentation,
			unsetEmojiPresentation = unsetEmojiPresentation,
			isTextPresentation = isTextPresentation,
			setTextPresentation = setTextPresentation,
			unsetTextPresentation = unsetTextPresentation,
			setZwjBit = setZwjBit,
		}
	end
	function __DARKLUA_BUNDLE_MODULES.e()
		local EMOJI_MODIFIER_LEAF_0 = {
			{ 0x1D, 0x1D },
			{ 0xF9, 0xF9 },
		}

		local EMOJI_MODIFIER_LEAF_1 = {
			{ 0x0A, 0x0D },
		}

		local EMOJI_MODIFIER_LEAF_2 = {
			{ 0x85, 0x85 },
			{ 0xC2, 0xC4 },
			{ 0xC7, 0xC7 },
			{ 0xCA, 0xCC },
		}

		local EMOJI_MODIFIER_LEAF_3 = {
			{ 0x42, 0x43 },
			{ 0x46, 0x50 },
			{ 0x66, 0x78 },
			{ 0x7C, 0x7C },
			{ 0x81, 0x83 },
			{ 0x85, 0x87 },
			{ 0x8F, 0x8F },
			{ 0x91, 0x91 },
			{ 0xAA, 0xAA },
		}

		local EMOJI_MODIFIER_LEAF_4 = {
			{ 0x74, 0x75 },
			{ 0x7A, 0x7A },
			{ 0x90, 0x90 },
			{ 0x95, 0x96 },
		}

		local EMOJI_MODIFIER_LEAF_5 = {
			{ 0x45, 0x47 },
			{ 0x4B, 0x4F },
			{ 0xA3, 0xA3 },
			{ 0xB4, 0xB6 },
			{ 0xC0, 0xC0 },
			{ 0xCC, 0xCC },
		}

		local EMOJI_MODIFIER_LEAF_62 = {
			{ 0x0C, 0x0C },
			{ 0x0F, 0x0F },
			{ 0x18, 0x1F },
			{ 0x26, 0x26 },
			{ 0x30, 0x39 },
			{ 0x3C, 0x3E },
			{ 0x77, 0x77 },
			{ 0xB5, 0xB6 },
			{ 0xB8, 0xB9 },
			{ 0xBB, 0xBB },
			{ 0xCD, 0xCF },
			{ 0xD1, 0xDD },
		}

		local EMOJI_MODIFIER_LEAF_7 = {
			{ 0xC3, 0xC5 },
			{ 0xF0, 0xF8 },
		}

		return {
			["0"] = EMOJI_MODIFIER_LEAF_0,
			["1"] = EMOJI_MODIFIER_LEAF_1,
			["2"] = EMOJI_MODIFIER_LEAF_2,
			["3"] = EMOJI_MODIFIER_LEAF_3,
			["4"] = EMOJI_MODIFIER_LEAF_4,
			["5"] = EMOJI_MODIFIER_LEAF_5,
			["6"] = EMOJI_MODIFIER_LEAF_62,
			["7"] = EMOJI_MODIFIER_LEAF_7,
		}
	end
	function __DARKLUA_BUNDLE_MODULES.f()
		local EMOJI_MODIFIER_LEAVES = __DARKLUA_BUNDLE_MODULES.load("e")

		local function isEmojiModifierBase(c)
			local cp = c

			local topBits = bit32.rshift(cp, 8)

			local leaf = if topBits == 0x26
				then EMOJI_MODIFIER_LEAVES["0"]
				elseif topBits == 0x27 then EMOJI_MODIFIER_LEAVES["1"]
				elseif topBits == 0x1F3 then EMOJI_MODIFIER_LEAVES["2"]
				elseif topBits == 0x1F4 then EMOJI_MODIFIER_LEAVES["3"]
				elseif topBits == 0x1F5 then EMOJI_MODIFIER_LEAVES["4"]
				elseif topBits == 0x1F6 then EMOJI_MODIFIER_LEAVES["5"]
				elseif topBits == 0x1F9 then EMOJI_MODIFIER_LEAVES["6"]
				elseif topBits == 0x1FA then EMOJI_MODIFIER_LEAVES["7"]
				else nil

			if leaf == nil then
				return false
			end

			local bottomBits = bit32.band(cp, 0xFF)

			for _, pair in leaf do
				local lo = pair[1]
				local hi = pair[2]
				if bottomBits >= lo and bottomBits <= hi then
					return true
				end
			end

			return false
		end

		return isEmojiModifierBase
	end
	function __DARKLUA_BUNDLE_MODULES.g()
		local function isLigatureTransparent(c)
			return c == 0x34F
				or c >= 0x17B4 and c <= 0x17B5
				or c >= 0x180B and c <= 0x180D
				or c == 0x180F
				or c == 0x200D
				or c >= 0xFE00 and c <= 0xFE0F
				or c >= 0xE0100 and c <= 0xE01EF
		end

		return isLigatureTransparent
	end
	function __DARKLUA_BUNDLE_MODULES.h()
		return {
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x08,
				0x04,
				0xFF,
				0x03,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x42,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x10,
				0x00,
				0x02,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x04,
				0x00,
				0x00,
				0x02,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0xF0,
				0x03,
				0x00,
				0x06,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x0C,
				0x00,
				0x01,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x80,
				0x00,
				0x00,
				0x00,
				0xFE,
				0x0F,
				0x07,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x04,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x0C,
				0x40,
				0x00,
				0x01,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x78,
				0x1F,
				0x40,
				0x32,
				0x21,
				0x4D,
				0xC4,
				0x00,
				0x07,
				0x05,
				0xFF,
				0x0F,

				0x80,
				0x69,
				0x01,
				0x00,
				0xC8,
				0x00,
				0x00,
				0xFC,
				0x1A,
				0x83,
				0x0C,
				0x03,
				0x60,
				0x30,
				0xC1,

				0x1A,
				0x00,
				0x00,
				0x06,
				0xBF,
				0x27,
				0x24,
				0xBF,
				0x54,
				0x20,
				0x02,
				0x01,
				0x18,
				0x00,
				0x90,

				0x50,
				0xB8,
				0x00,
				0x18,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0xE0,
				0x00,
				0x02,
				0x00,
				0x01,
				0x80,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x30,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0xE0,
				0x00,
				0x00,
				0x18,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x21,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
			},
			{
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x01,
				0x20,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x80,
				0x02,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
			},
			{
				0x10,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x03,
				0xC0,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x04,
				0x00,
				0x00,
				0x04,
				0x00,
				0x80,
				0x80,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0xE0,
				0x20,
				0x10,
				0xF2,
				0x1F,
				0x40,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x21,
				0x00,
				0x00,
				0xC8,
				0xCE,
				0x80,
				0x70,
				0x00,
				0x00,

				0x54,
				0x7C,
				0xF0,
				0xFF,
				0x01,
				0x20,
				0xA8,
				0x00,
			},
			{
				0x00,
				0x01,
				0x20,
				0x80,
				0x40,
				0x00,
				0x00,
				0x80,
				0xC6,
				0x63,
				0x08,
				0x00,
				0x00,
				0x04,
				0x00,

				0x20,
				0x00,
				0x00,
				0x00,
				0x00,
				0x08,
				0x00,
				0x09,
				0x88,
				0x00,
				0x08,
				0x00,
				0x84,
				0x70,
				0x3C,

				0x80,
				0x2E,
				0x00,
				0x21,
				0x0C,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x06,
				0xFF,
				0xFF,
				0xFF,

				0x80,
				0xF9,
				0x03,
				0x80,
				0x3C,
				0x01,
				0x00,
				0x20,
				0x01,
				0x06,
				0x10,
				0x1C,
				0x00,
				0x0E,
				0x70,

				0x0A,
				0x81,
				0x08,
				0x04,
				0x00,
				0x00,
				0x01,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x80,
				0x20,
				0x12,
				0x01,
				0x00,
				0x20,
				0x04,
				0x16,
				0x00,
				0xE8,

				0x00,
				0x00,
				0x3F,
				0x02,
				0x09,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,

				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
				0x00,
			},
		}
	end
	function __DARKLUA_BUNDLE_MODULES.i()
		local EMOJI_PRESENTATION_LEAVES = __DARKLUA_BUNDLE_MODULES.load("h")
		local WidthInfo = __DARKLUA_BUNDLE_MODULES.load("d")

		local function startsEmojiPresentationSeq(c)
			local cp = c

			local topBits = bit32.rshift(cp, 10)

			local idxOfLeaf = if topBits == 0x0
				then 0
				elseif topBits == 0x8 then 1
				elseif topBits == 0x9 then 2
				elseif topBits == 0xA then 3
				elseif topBits == 0xC then 4
				elseif topBits == 0x7C then 5
				elseif topBits == 0x7D then 6
				else nil

			if idxOfLeaf == nil then
				return false
			end

			local idxWithinLeaf = bit32.band(bit32.rshift(cp, 3), 0x7F)

			local leafByte = EMOJI_PRESENTATION_LEAVES[idxOfLeaf][idxWithinLeaf]

			return bit32.band(bit32.rshift(leafByte, bit32.band(cp, 7)), 1) == 1
		end

		return startsEmojiPresentationSeq
	end
	function __DARKLUA_BUNDLE_MODULES.j()
		local SOLIDUS_TRANSPARENT = __DARKLUA_BUNDLE_MODULES.load("a")
		local WIDTH = __DARKLUA_BUNDLE_MODULES.load("b")
		local WIDTH_CJK = __DARKLUA_BUNDLE_MODULES.load("c")
		local WidthInfo = __DARKLUA_BUNDLE_MODULES.load("d")
		local isEmojiModifierBase = __DARKLUA_BUNDLE_MODULES.load("f")
		local isLigatureTransparent = __DARKLUA_BUNDLE_MODULES.load("g")
		local startsEmojiPresentationSeq = __DARKLUA_BUNDLE_MODULES.load("i")

		local function isSolidusTransparent(c)
			local cp = c

			if isLigatureTransparent(c) then
				return true
			end

			for _, pair in SOLIDUS_TRANSPARENT do
				local lo = pair[1]
				local hi = pair[2]

				local lo = bit32.bor(lo[1], bit32.lshift(lo[2], 8), bit32.lshift(lo[3], 16))
				local hi = bit32.bor(hi[1], bit32.lshift(hi[2], 8), bit32.lshift(hi[3], 16))

				if cp >= lo and cp <= hi then
					return true
				end
			end

			return false
		end

		local function lookupWidthCjk(c)
			local cp = c

			local t1Offset = WIDTH_CJK.ROOT_CJK[1 + bit32.rshift(cp, 13)]

			local t2Offset = WIDTH.MIDDLE[1 + t1Offset][1 + bit32.band(bit32.rshift(cp, 7), 0x3F)]

			local packedWidths = WIDTH.LEAVES[1 + t2Offset][1 + bit32.band(bit32.rshift(cp, 2), 0x1F)]

			local width = bit32.band(bit32.rshift(packedWidths, 2 * bit32.band(cp, 0b11)), 0b11)

			if width < 3 then
				return width, WidthInfo.DEFAULT
			else
				if c == 0xA then
					return 1, WidthInfo.LINE_FEED
				elseif c == 0x338 then
					return 0, WidthInfo.COMBINING_LONG_SOLIDUS_OVERLAY
				elseif c == 0x5DC then
					return 1, WidthInfo.HEBREW_LETTER_LAMED
				elseif c >= 0x622 and c <= 0x882 then
					return 1, WidthInfo.JOINING_GROUP_ALEF
				elseif c >= 0x1780 and c <= 0x17AF then
					return 1, WidthInfo.KHMER_COENG_ELIGIBLE_LETTER
				elseif c == 0x17D8 then
					return 3, WidthInfo.DEFAULT
				elseif c == 0x1A10 then
					return 1, WidthInfo.BUGINESE_LETTER_YA
				elseif c >= 0x2D31 and c <= 0x2D6F then
					return 1, WidthInfo.TIFINAGH_CONSONANT
				elseif c >= 0xA4FC and c <= 0xA4FD then
					return 1, WidthInfo.LISU_TONE_LETTER_MYA_NA_JEU
				elseif c == 0xFE0F then
					return 0, WidthInfo.VARIATION_SELECTOR_16
				elseif c == 0x10C03 then
					return 1, WidthInfo.OLD_TURKIC_LETTER_ORKHON_I
				elseif c >= 0x1F1E6 and c <= 0x1F1FF then
					return 1, WidthInfo.REGIONAL_INDICATOR
				elseif c >= 0x1F3FB and c <= 0x1F3FF then
					return 2, WidthInfo.EMOJI_MODIFIER
				else
					return 2, WidthInfo.EMOJI_PRESENTATION
				end
			end
		end

		local function widthInStrCjk(c, nextInfo)
			if WidthInfo.isEmojiPresentation(nextInfo) then
				if startsEmojiPresentationSeq(c) then
					local width = if WidthInfo.isZwjEmojiPresentation(nextInfo) then 0 else 2

					return width, WidthInfo.EMOJI_PRESENTATION
				else
					nextInfo = WidthInfo.unsetEmojiPresentation(nextInfo)
				end
			end

			local s = utf8.char(c)

			if
				(
					nextInfo == WidthInfo.COMBINING_LONG_SOLIDUS_OVERLAY
					or nextInfo == WidthInfo.SOLIDUS_OVERLAY_ALEF
				) and (s == "<" or s == "=" or s == ">")
			then
				return 2, WidthInfo.DEFAULT
			end

			if c <= 0xA0 then
				if s == "\n" then
					return 1, WidthInfo.LINE_FEED
				elseif s == "\r" and nextInfo == WidthInfo.LINE_FEED then
					return 0, WidthInfo.DEFAULT
				else
					return 1, WidthInfo.DEFAULT
				end
			else
				if nextInfo ~= WidthInfo.DEFAULT then
					if s == "\u{FE0F}" then
						return 0, WidthInfo.setEmojiPresentation(nextInfo)
					end

					if WidthInfo.isLigatureTransparent(nextInfo) then
						if s == "\u{200D}" then
							return 0, WidthInfo.setZwjBit(nextInfo)
						elseif isLigatureTransparent(c) then
							return 0, nextInfo
						end
					end

					if nextInfo == WidthInfo.COMBINING_LONG_SOLIDUS_OVERLAY and isSolidusTransparent(c) then
						return lookupWidthCjk(c), WidthInfo.COMBINING_LONG_SOLIDUS_OVERLAY
					elseif nextInfo == WidthInfo.JOINING_GROUP_ALEF and c == 0x0338 then
						return 0, WidthInfo.SOLIDUS_OVERLAY_ALEF
					elseif
						(
							nextInfo == WidthInfo.JOINING_GROUP_ALEF
							or nextInfo == WidthInfo.SOLIDUS_OVERLAY_ALEF
						)
						and (
							c == 0x644
							or (c >= 0x6B5 and c <= 0x6B8)
							or c == 0x76A
							or c == 0x8A6
							or c == 0x8C7
						)
					then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.ZWJ_HEBREW_LETTER_LAMED and c == 0x05D0 then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.KHMER_COENG_ELIGIBLE_LETTER and c == 0x17D2 then
						return -1, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.ZWJ_BUGINESE_LETTER_YA and c == 0x1A17 then
						return 0, WidthInfo.BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA
					elseif nextInfo == WidthInfo.BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA and c == 0x1A15 then
						return 0, WidthInfo.DEFAULT
					elseif
						(
							nextInfo == WidthInfo.TIFINAGH_CONSONANT
							or nextInfo == WidthInfo.ZWJ_TIFINAGH_CONSONANT
						) and c == 0x2D7F
					then
						return 1, WidthInfo.TIFINAGH_JOINER_CONSONANT
					elseif
						nextInfo == WidthInfo.ZWJ_TIFINAGH_CONSONANT
						and ((c >= 0x2D31 and c <= 0x2D65) or c == 0x2D6F)
					then
						return 0, WidthInfo.DEFAULT
					elseif
						nextInfo == WidthInfo.TIFINAGH_JOINER_CONSONANT
						and ((c >= 0x2D31 and c <= 0x2D65) or c == 0x2D6F)
					then
						return -1, WidthInfo.DEFAULT
					elseif
						nextInfo == WidthInfo.LISU_TONE_LETTER_MYA_NA_JEU and (c >= 0xA4F8 and c <= 0xA4FB)
					then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.ZWJ_OLD_TURKIC_LETTER_ORKHON_I and c == 0x10C32 then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.EMOJI_MODIFIER and isEmojiModifierBase(c) then
						return 0, WidthInfo.EMOJI_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.REGIONAL_INDICATOR
							or nextInfo == WidthInfo.SEVERAL_REGIONAL_INDICATOR
						) and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return 1, WidthInfo.SEVERAL_REGIONAL_INDICATOR
					elseif
						(
							nextInfo == WidthInfo.EMOJI_PRESENTATION
							or nextInfo == WidthInfo.SEVERAL_REGIONAL_INDICATOR
							or nextInfo == WidthInfo.EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
							or nextInfo == WidthInfo.ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
							or nextInfo == WidthInfo.EMOJI_MODIFIER
						) and c == 0x200D
					then
						return 0, WidthInfo.ZWJ_EMOJI_PRESENTATION
					elseif nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and c == 0x20E3 then
						return 0, WidthInfo.KEYCAP_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.VS16_ZWJ_EMOJI_PRESENTATION and startsEmojiPresentationSeq(c)
					then
						return 0, WidthInfo.EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION
						and (
							(c >= string.byte("0") and c <= string.byte("9"))
							or c == string.byte("#")
							or c == string.byte("*")
						)
					then
						return 0, WidthInfo.KEYCAP_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return 1, WidthInfo.REGIONAL_INDICATOR_ZWJ_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.REGIONAL_INDICATOR_ZWJ_PRESENTATION
							or nextInfo == WidthInfo.ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
						) and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return -1, WidthInfo.EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
					elseif
						nextInfo == WidthInfo.EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
						and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return 3, WidthInfo.ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
					elseif
						nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and (c >= 0x1F3FB and c <= 0x1F3FF)
					then
						return 0, WidthInfo.EMOJI_MODIFIER
					elseif nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and c == 0xE007F then
						return 0, WidthInfo.TAG_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A1_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A1_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A2_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A2_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A5_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A5_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A6_END_ZWJ_EMOJI_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.TAG_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A1_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A2_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
						) and (c >= 0xE0030 and c <= 0xE0039)
					then
						return 0, WidthInfo.TAG_D1_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_D1_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0030 and c <= 0xE0039)
					then
						return 0, WidthInfo.TAG_D2_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_D2_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0030 and c <= 0xE0039)
					then
						return 0, WidthInfo.TAG_D3_END_ZWJ_EMOJI_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A5_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A6_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_D3_END_ZWJ_EMOJI_PRESENTATION
						) and c == 0x1F3F4
					then
						return 0, WidthInfo.EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION
						and select(lookupWidthCjk(c), 2) == WidthInfo.EMOJI_PRESENTATION
					then
						return 0, WidthInfo.EMOJI_PRESENTATION
					end
				end

				local ret0, ret1 = lookupWidthCjk(c)

				return ret0, ret1
			end
		end

		local function strWidthCjk(s)
			local length = utf8.len(s)
			if length == nil then
				error("Invalid UTF-8 string")
			end

			local reversedChars = table.create(length)
			local i = length

			for _, code in utf8.codes(s) do
				reversedChars[i] = code
				i -= 1
			end

			local sum = 0
			local nextInfo = WidthInfo.DEFAULT

			for _, code in reversedChars do
				local add, info = widthInStrCjk(code, nextInfo)
				sum += add
				nextInfo = info
			end

			return sum
		end

		return strWidthCjk
	end
	function __DARKLUA_BUNDLE_MODULES.k()
		local NON_TRANSPARENT_ZERO_WIDTHS = {
			{ { 0x05, 0x06, 0x00 }, { 0x05, 0x06, 0x00 } },
			{ { 0x90, 0x08, 0x00 }, { 0x91, 0x08, 0x00 } },
			{ { 0xE2, 0x08, 0x00 }, { 0xE2, 0x08, 0x00 } },
			{ { 0xBE, 0x09, 0x00 }, { 0xBE, 0x09, 0x00 } },
			{ { 0xD7, 0x09, 0x00 }, { 0xD7, 0x09, 0x00 } },
			{ { 0x3E, 0x0B, 0x00 }, { 0x3E, 0x0B, 0x00 } },
			{ { 0x57, 0x0B, 0x00 }, { 0x57, 0x0B, 0x00 } },
			{ { 0xBE, 0x0B, 0x00 }, { 0xBE, 0x0B, 0x00 } },
			{ { 0xD7, 0x0B, 0x00 }, { 0xD7, 0x0B, 0x00 } },
			{ { 0xC0, 0x0C, 0x00 }, { 0xC0, 0x0C, 0x00 } },
			{ { 0xC2, 0x0C, 0x00 }, { 0xC2, 0x0C, 0x00 } },
			{ { 0xC7, 0x0C, 0x00 }, { 0xC8, 0x0C, 0x00 } },
			{ { 0xCA, 0x0C, 0x00 }, { 0xCB, 0x0C, 0x00 } },
			{ { 0xD5, 0x0C, 0x00 }, { 0xD6, 0x0C, 0x00 } },
			{ { 0x3E, 0x0D, 0x00 }, { 0x3E, 0x0D, 0x00 } },
			{ { 0x4E, 0x0D, 0x00 }, { 0x4E, 0x0D, 0x00 } },
			{ { 0x57, 0x0D, 0x00 }, { 0x57, 0x0D, 0x00 } },
			{ { 0xCF, 0x0D, 0x00 }, { 0xCF, 0x0D, 0x00 } },
			{ { 0xDF, 0x0D, 0x00 }, { 0xDF, 0x0D, 0x00 } },
			{ { 0x60, 0x11, 0x00 }, { 0xFF, 0x11, 0x00 } },
			{ { 0x0E, 0x18, 0x00 }, { 0x0E, 0x18, 0x00 } },
			{ { 0x35, 0x1B, 0x00 }, { 0x35, 0x1B, 0x00 } },
			{ { 0x3B, 0x1B, 0x00 }, { 0x3B, 0x1B, 0x00 } },
			{ { 0x3D, 0x1B, 0x00 }, { 0x3D, 0x1B, 0x00 } },
			{ { 0x43, 0x1B, 0x00 }, { 0x43, 0x1B, 0x00 } },
			{ { 0x0C, 0x20, 0x00 }, { 0x0D, 0x20, 0x00 } },
			{ { 0x65, 0x20, 0x00 }, { 0x69, 0x20, 0x00 } },
			{ { 0x2E, 0x30, 0x00 }, { 0x2F, 0x30, 0x00 } },
			{ { 0x64, 0x31, 0x00 }, { 0x64, 0x31, 0x00 } },
			{ { 0xFA, 0xA8, 0x00 }, { 0xFA, 0xA8, 0x00 } },
			{ { 0xB0, 0xD7, 0x00 }, { 0xC6, 0xD7, 0x00 } },
			{ { 0xCB, 0xD7, 0x00 }, { 0xFB, 0xD7, 0x00 } },
			{ { 0x9E, 0xFF, 0x00 }, { 0xA0, 0xFF, 0x00 } },
			{ { 0xF0, 0xFF, 0x00 }, { 0xF8, 0xFF, 0x00 } },
			{ { 0xC2, 0x11, 0x01 }, { 0xC3, 0x11, 0x01 } },
			{ { 0x3E, 0x13, 0x01 }, { 0x3E, 0x13, 0x01 } },
			{ { 0x57, 0x13, 0x01 }, { 0x57, 0x13, 0x01 } },
			{ { 0xB0, 0x14, 0x01 }, { 0xB0, 0x14, 0x01 } },
			{ { 0xBD, 0x14, 0x01 }, { 0xBD, 0x14, 0x01 } },
			{ { 0xAF, 0x15, 0x01 }, { 0xAF, 0x15, 0x01 } },
			{ { 0x30, 0x19, 0x01 }, { 0x30, 0x19, 0x01 } },
			{ { 0x3F, 0x19, 0x01 }, { 0x3F, 0x19, 0x01 } },
			{ { 0x41, 0x19, 0x01 }, { 0x41, 0x19, 0x01 } },
			{ { 0x3A, 0x1A, 0x01 }, { 0x3A, 0x1A, 0x01 } },
			{ { 0x84, 0x1A, 0x01 }, { 0x89, 0x1A, 0x01 } },
			{ { 0x46, 0x1D, 0x01 }, { 0x46, 0x1D, 0x01 } },
			{ { 0x02, 0x1F, 0x01 }, { 0x02, 0x1F, 0x01 } },
			{ { 0x65, 0xD1, 0x01 }, { 0x65, 0xD1, 0x01 } },
			{ { 0x6E, 0xD1, 0x01 }, { 0x72, 0xD1, 0x01 } },
			{ { 0x00, 0x00, 0x0E }, { 0x00, 0x00, 0x0E } },
			{ { 0x02, 0x00, 0x0E }, { 0x1F, 0x00, 0x0E } },
			{ { 0x80, 0x00, 0x0E }, { 0xFF, 0x00, 0x0E } },
			{ { 0xF0, 0x01, 0x0E }, { 0xFF, 0x0F, 0x0E } },
		}

		return NON_TRANSPARENT_ZERO_WIDTHS
	end
	function __DARKLUA_BUNDLE_MODULES.l()
		local TEXT_PRESENTATION_LEAF_0 = {
			{ 0x1A, 0x1B },
			{ 0xE9, 0xEC },
			{ 0xF0, 0xF0 },
			{ 0xF3, 0xF3 },
		}

		local TEXT_PRESENTATION_LEAF_1 = {
			{ 0xFD, 0xFE },
		}

		local TEXT_PRESENTATION_LEAF_2 = {
			{ 0x14, 0x15 },
			{ 0x48, 0x53 },
			{ 0x7F, 0x7F },
			{ 0x93, 0x93 },
			{ 0xA1, 0xA1 },
			{ 0xAA, 0xAB },
			{ 0xBD, 0xBE },
			{ 0xC4, 0xC5 },
			{ 0xCE, 0xCE },
			{ 0xD4, 0xD4 },
			{ 0xEA, 0xEA },
			{ 0xF2, 0xF3 },
			{ 0xF5, 0xF5 },
			{ 0xFA, 0xFA },
			{ 0xFD, 0xFD },
		}

		local TEXT_PRESENTATION_LEAF_3 = {
			{ 0x05, 0x05 },
			{ 0x0A, 0x0B },
			{ 0x28, 0x28 },
			{ 0x4C, 0x4C },
			{ 0x4E, 0x4E },
			{ 0x53, 0x55 },
			{ 0x57, 0x57 },
			{ 0x95, 0x97 },
			{ 0xB0, 0xB0 },
			{ 0xBF, 0xBF },
		}

		local TEXT_PRESENTATION_LEAF_4 = {
			{ 0x1B, 0x1C },
			{ 0x50, 0x50 },
			{ 0x55, 0x55 },
		}

		local TEXT_PRESENTATION_LEAF_5 = {
			{ 0x04, 0x04 },
		}

		local TEXT_PRESENTATION_LEAF_6 = {
			{ 0x0D, 0x0F },
			{ 0x15, 0x15 },
			{ 0x1C, 0x1C },
			{ 0x78, 0x78 },
			{ 0x93, 0x93 },
			{ 0xA7, 0xA7 },
			{ 0xAC, 0xAE },
			{ 0xC2, 0xC2 },
			{ 0xC4, 0xC4 },
			{ 0xC6, 0xC6 },
			{ 0xCA, 0xCA },
			{ 0xE0, 0xE0 },
			{ 0xED, 0xED },
		}

		local TEXT_PRESENTATION_LEAF_7 = {
			{ 0x08, 0x08 },
			{ 0x15, 0x15 },
			{ 0x1F, 0x1F },
			{ 0x26, 0x26 },
			{ 0x42, 0x42 },
			{ 0x46, 0x49 },
			{ 0x4D, 0x4E },
			{ 0x53, 0x53 },
			{ 0x6A, 0x6A },
			{ 0x7D, 0x7D },
			{ 0xA3, 0xA3 },
			{ 0xB0, 0xB0 },
			{ 0xB3, 0xB3 },
			{ 0xBB, 0xBB },
			{ 0xBF, 0xBF },
			{ 0xCB, 0xCB },
			{ 0xDA, 0xDA },
			{ 0xDF, 0xDF },
			{ 0xE4, 0xE6 },
			{ 0xEA, 0xED },
			{ 0xF7, 0xF7 },
			{ 0xF9, 0xFB },
		}

		local TEXT_PRESENTATION_LEAF_8 = {
			{ 0x08, 0x08 },
			{ 0x0D, 0x0D },
			{ 0x12, 0x13 },
			{ 0x50, 0x67 },
		}

		local TEXT_PRESENTATION_LEAF_9 = {
			{ 0x10, 0x10 },
			{ 0x87, 0x87 },
			{ 0x8D, 0x8D },
			{ 0x91, 0x91 },
			{ 0x94, 0x94 },
			{ 0x98, 0x98 },
			{ 0xAD, 0xAD },
			{ 0xB2, 0xB2 },
			{ 0xB9, 0xBA },
			{ 0xBC, 0xBC },
		}

		return {
			["0"] = TEXT_PRESENTATION_LEAF_0,
			["1"] = TEXT_PRESENTATION_LEAF_1,
			["2"] = TEXT_PRESENTATION_LEAF_2,
			["3"] = TEXT_PRESENTATION_LEAF_3,
			["4"] = TEXT_PRESENTATION_LEAF_4,
			["5"] = TEXT_PRESENTATION_LEAF_5,
			["6"] = TEXT_PRESENTATION_LEAF_6,
			["7"] = TEXT_PRESENTATION_LEAF_7,
			["8"] = TEXT_PRESENTATION_LEAF_8,
			["9"] = TEXT_PRESENTATION_LEAF_9,
		}
	end
	function __DARKLUA_BUNDLE_MODULES.m()
		local NON_TRANSPARENT_ZERO_WIDTHS = __DARKLUA_BUNDLE_MODULES.load("k")
		local TEXT_PRESENTATION_LEAVES = __DARKLUA_BUNDLE_MODULES.load("l")
		local WIDTH = __DARKLUA_BUNDLE_MODULES.load("b")
		local WidthInfo = __DARKLUA_BUNDLE_MODULES.load("d")
		local isEmojiModifierBase = __DARKLUA_BUNDLE_MODULES.load("f")
		local isLigatureTransparent = __DARKLUA_BUNDLE_MODULES.load("g")
		local startsEmojiPresentationSeq = __DARKLUA_BUNDLE_MODULES.load("i")

		local function startsNonIdeographicTextPresentationSeq(c)
			local cp = c

			local topBits = bit32.rshift(cp, 8)

			local leaf = if topBits == 0x23
				then TEXT_PRESENTATION_LEAVES["0"]
				elseif topBits == 0x25 then TEXT_PRESENTATION_LEAVES["1"]
				elseif topBits == 0x26 then TEXT_PRESENTATION_LEAVES["2"]
				elseif topBits == 0x27 then TEXT_PRESENTATION_LEAVES["3"]
				elseif topBits == 0x2B then TEXT_PRESENTATION_LEAVES["4"]
				elseif topBits == 0x1F0 then TEXT_PRESENTATION_LEAVES["5"]
				elseif topBits == 0x1F3 then TEXT_PRESENTATION_LEAVES["6"]
				elseif topBits == 0x1F4 then TEXT_PRESENTATION_LEAVES["7"]
				elseif topBits == 0x1F5 then TEXT_PRESENTATION_LEAVES["8"]
				elseif topBits == 0x1F6 then TEXT_PRESENTATION_LEAVES["9"]
				else nil

			if leaf == nil then
				return false
			end

			local bottomBits = bit32.band(cp, 0xFF)

			for _, pair in leaf do
				local lo = pair[1]
				local hi = pair[2]
				if bottomBits >= lo and bottomBits <= hi then
					return true
				end
			end

			return false
		end

		local function lookupWidth(c)
			local cp = c

			local t1Offset = WIDTH.ROOT[1 + bit32.rshift(cp, 13)]

			local t2Offset = WIDTH.MIDDLE[1 + t1Offset][1 + bit32.band(bit32.rshift(cp, 7), 0x3F)]

			local packedWidths = WIDTH.LEAVES[1 + t2Offset][1 + bit32.band(bit32.rshift(cp, 2), 0x1F)]

			local width = bit32.band(bit32.rshift(packedWidths, 2 * bit32.band(cp, 0b11)), 0b11)

			if width < 3 then
				return width, WidthInfo.DEFAULT
			else
				if c == 0xA then
					return 1, WidthInfo.LINE_FEED
				elseif c == 0x5DC then
					return 1, WidthInfo.HEBREW_LETTER_LAMED
				elseif c >= 0x622 and c <= 0x882 then
					return 1, WidthInfo.JOINING_GROUP_ALEF
				elseif c >= 0x1780 and c <= 0x17AF then
					return 1, WidthInfo.KHMER_COENG_ELIGIBLE_LETTER
				elseif c == 0x17D8 then
					return 3, WidthInfo.DEFAULT
				elseif c == 0x1A10 then
					return 1, WidthInfo.BUGINESE_LETTER_YA
				elseif c >= 0x2D31 and c <= 0x2D6F then
					return 1, WidthInfo.TIFINAGH_CONSONANT
				elseif c >= 0xA4FC and c <= 0xA4FD then
					return 1, WidthInfo.LISU_TONE_LETTER_MYA_NA_JEU
				elseif c == 0xFE0E then
					return 0, WidthInfo.VARIATION_SELECTOR_15
				elseif c == 0xFE0F then
					return 0, WidthInfo.VARIATION_SELECTOR_16
				elseif c == 0x10C03 then
					return 1, WidthInfo.OLD_TURKIC_LETTER_ORKHON_I
				elseif c >= 0x1F1E6 and c <= 0x1F1FF then
					return 1, WidthInfo.REGIONAL_INDICATOR
				elseif c >= 0x1F3FB and c <= 0x1F3FF then
					return 2, WidthInfo.EMOJI_MODIFIER
				else
					return 2, WidthInfo.EMOJI_PRESENTATION
				end
			end
		end

		local function isTransparentZeroWidth(c)
			if lookupWidth(c) ~= 0 then
				return false
			else
				local cp = c

				for _, pair in NON_TRANSPARENT_ZERO_WIDTHS do
					local lo = pair[1]
					local hi = pair[2]

					local lo = bit32.bor(lo[1], bit32.lshift(lo[2], 8), bit32.lshift(lo[3], 16))
					local hi = bit32.bor(hi[1], bit32.lshift(hi[2], 8), bit32.lshift(hi[3], 16))

					if cp >= lo and cp <= hi then
						return false
					end
				end

				return true
			end
		end

		local function widthInStr(c, nextInfo)
			if WidthInfo.isEmojiPresentation(nextInfo) then
				if startsEmojiPresentationSeq(c) then
					local width = if WidthInfo.isZwjEmojiPresentation(nextInfo) then 0 else 2

					return width, WidthInfo.EMOJI_PRESENTATION
				else
					nextInfo = WidthInfo.unsetEmojiPresentation(nextInfo)
				end
			end

			local s = utf8.char(c)

			if c <= 0xA0 then
				if s == "\n" then
					return 1, WidthInfo.LINE_FEED
				elseif s == "\r" and nextInfo == WidthInfo.LINE_FEED then
					return 0, WidthInfo.DEFAULT
				else
					return 1, WidthInfo.DEFAULT
				end
			else
				if nextInfo ~= WidthInfo.DEFAULT then
					if c == 0xFE0F then
						return 0, WidthInfo.setEmojiPresentation(nextInfo)
					end

					if c == 0xFE0E then
						return 0, WidthInfo.setTextPresentation(nextInfo)
					end

					if WidthInfo.isTextPresentation(nextInfo) then
						if startsNonIdeographicTextPresentationSeq(c) then
							return 1, WidthInfo.DEFAULT
						else
							nextInfo = WidthInfo.unsetTextPresentation(nextInfo)
						end
					end

					if WidthInfo.isLigatureTransparent(nextInfo) then
						if c == 0x200D then
							return 0, WidthInfo.setZwjBit(nextInfo)
						elseif isLigatureTransparent(c) then
							return 0, nextInfo
						end
					end

					if
						nextInfo == WidthInfo.JOINING_GROUP_ALEF
						and (
							c == 0x644
							or (c >= 0x6B5 and c <= 0x6B8)
							or c == 0x76A
							or c == 0x8A6
							or c == 0x8C7
						)
					then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.JOINING_GROUP_ALEF and isTransparentZeroWidth(c) then
						return 0, WidthInfo.JOINING_GROUP_ALEF
					elseif nextInfo == WidthInfo.ZWJ_HEBREW_LETTER_LAMED and c == 0x05D0 then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.KHMER_COENG_ELIGIBLE_LETTER and c == 0x17D2 then
						return -1, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.ZWJ_BUGINESE_LETTER_YA and c == 0x1A17 then
						return 0, WidthInfo.BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA
					elseif nextInfo == WidthInfo.BUGINESE_VOWEL_SIGN_I_ZWJ_LETTER_YA and c == 0x1A15 then
						return 0, WidthInfo.DEFAULT
					elseif
						(
							nextInfo == WidthInfo.TIFINAGH_CONSONANT
							or nextInfo == WidthInfo.ZWJ_TIFINAGH_CONSONANT
						) and c == 0x2D7F
					then
						return 1, WidthInfo.TIFINAGH_JOINER_CONSONANT
					elseif
						nextInfo == WidthInfo.ZWJ_TIFINAGH_CONSONANT
						and ((c >= 0x2D31 and c <= 0x2D65) or c == 0x2D6F)
					then
						return 0, WidthInfo.DEFAULT
					elseif
						nextInfo == WidthInfo.TIFINAGH_JOINER_CONSONANT
						and ((c >= 0x2D31 and c <= 0x2D65) or c == 0x2D6F)
					then
						return -1, WidthInfo.DEFAULT
					elseif
						nextInfo == WidthInfo.LISU_TONE_LETTER_MYA_NA_JEU and (c >= 0xA4F8 and c <= 0xA4FB)
					then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.ZWJ_OLD_TURKIC_LETTER_ORKHON_I and c == 0x10C32 then
						return 0, WidthInfo.DEFAULT
					elseif nextInfo == WidthInfo.EMOJI_MODIFIER and isEmojiModifierBase(c) then
						return 0, WidthInfo.EMOJI_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.REGIONAL_INDICATOR
							or nextInfo == WidthInfo.SEVERAL_REGIONAL_INDICATOR
						) and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return 1, WidthInfo.SEVERAL_REGIONAL_INDICATOR
					elseif
						(
							nextInfo == WidthInfo.EMOJI_PRESENTATION
							or nextInfo == WidthInfo.SEVERAL_REGIONAL_INDICATOR
							or nextInfo == WidthInfo.EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
							or nextInfo == WidthInfo.ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
							or nextInfo == WidthInfo.EMOJI_MODIFIER
						) and c == 0x200D
					then
						return 0, WidthInfo.ZWJ_EMOJI_PRESENTATION
					elseif nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and c == 0x20E3 then
						return 0, WidthInfo.KEYCAP_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.VS16_ZWJ_EMOJI_PRESENTATION and startsEmojiPresentationSeq(c)
					then
						return 0, WidthInfo.EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.VS16_KEYCAP_ZWJ_EMOJI_PRESENTATION
						and (
							(c >= string.byte("0") and c <= string.byte("9"))
							or c == string.byte("#")
							or c == string.byte("*")
						)
					then
						return 0, WidthInfo.EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return 1, WidthInfo.REGIONAL_INDICATOR_ZWJ_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.REGIONAL_INDICATOR_ZWJ_PRESENTATION
							or nextInfo == WidthInfo.ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
						) and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return -1, WidthInfo.EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
					elseif
						nextInfo == WidthInfo.EVEN_REGIONAL_INDICATOR_ZWJ_PRESENTATION
						and (c >= 0x1F1E6 and c <= 0x1F1FF)
					then
						return 3, WidthInfo.ODD_REGIONAL_INDICATOR_ZWJ_PRESENTATION
					elseif
						nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and (c >= 0x1F3FB and c <= 0x1F3FF)
					then
						return 0, WidthInfo.EMOJI_MODIFIER
					elseif nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION and c == 0xE007F then
						return 0, WidthInfo.TAG_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A1_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A1_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A2_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A2_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A5_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_A5_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0061 and c <= 0xE007A)
					then
						return 0, WidthInfo.TAG_A6_END_ZWJ_EMOJI_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.TAG_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A1_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A2_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
						) and (c >= 0xE0030 and c <= 0xE0039)
					then
						return 0, WidthInfo.TAG_D1_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_D1_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0030 and c <= 0xE0039)
					then
						return 0, WidthInfo.TAG_D2_END_ZWJ_EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.TAG_D2_END_ZWJ_EMOJI_PRESENTATION
						and (c >= 0xE0030 and c <= 0xE0039)
					then
						return 0, WidthInfo.TAG_D3_END_ZWJ_EMOJI_PRESENTATION
					elseif
						(
							nextInfo == WidthInfo.TAG_A3_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A4_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A5_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_A6_END_ZWJ_EMOJI_PRESENTATION
							or nextInfo == WidthInfo.TAG_D3_END_ZWJ_EMOJI_PRESENTATION
						) and c == 0x1F3F4
					then
						return 0, WidthInfo.EMOJI_PRESENTATION
					elseif
						nextInfo == WidthInfo.ZWJ_EMOJI_PRESENTATION
						and select(lookupWidth(c), 2) == WidthInfo.EMOJI_PRESENTATION
					then
						return 0, WidthInfo.EMOJI_PRESENTATION
					end
				end

				local ret0, ret1 = lookupWidth(c)

				return ret0, ret1
			end
		end

		local function strWidth(s)
			local length = utf8.len(s)
			if length == nil then
				error("Invalid UTF-8 string")
			end

			local reversedChars = table.create(length)
			local i = length

			for _, code in utf8.codes(s) do
				reversedChars[i] = code
				i -= 1
			end

			local sum = 0
			local nextInfo = WidthInfo.DEFAULT

			for _, code in reversedChars do
				local add, info = widthInStr(code, nextInfo)
				sum += add
				nextInfo = info
			end

			return sum
		end

		return strWidth
	end
end

local width = if _G.UNICODE_WIDTH_CJK ~= false
	then __DARKLUA_BUNDLE_MODULES.load("j")
	else __DARKLUA_BUNDLE_MODULES.load("m")

return {
	width = width,
}
