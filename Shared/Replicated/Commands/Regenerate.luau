local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local playerMarshaller = require(ReplicatedStorage.Utility.playerMarshaller)
local regeneration = require(ReplicatedStorage.Combat.Passives.regeneration)
-- Cmdr Command
-- Regenerate.luau

-- for regenerating player's health

return {
	Name = "Regenerate",
	Aliases = { "Regen", "Regenerate", "Health", "HP" },
	Description = "Regenerates a players health by increment every interval",
	Group = "Utility",
	Args = {
		{
			Type = "player",
			Name = "target",
			Description = "The player to regenerate health for",
			Default = Players.LocalPlayer,
		},
		{
			Type = "number",
			Name = "interval",
			Description = "How many seconds when the player health can be regenerated",
			Default = 1,
		},
		{
			Type = "number",
			Name = "increment",
			Description = "How much health the player health can be regenerated by",
			Default = 6,
		},
		{
			Type = "number",
			Name = "cancelTime",
			Description = "When to stop regenerating the player's health",
			Default = 100,
		},
	},
	ClientRun = function(_, target: Player, interval: number, increment: number, cancelTime: number)
		regeneration(target, interval, increment)

		local character = playerMarshaller.getByName(target.Name).Character
		if character then
			task.delay(cancelTime, function()
				character:SetAttribute("Regeneration", nil)
			end)
		end

		return "Regeneration executed"
	end,
}
