--!strict

local Lighting = game:GetService("Lighting")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local characterMarshaller = require(ReplicatedStorage.Utility.characterMarshaller)
local gamecamera = require("../Modules/gamecamera")
local playerMarshaller = require(ReplicatedStorage.Utility.playerMarshaller)
local trove = require(ReplicatedStorage.Packages.trove)

-- sunflare.luau

local player = playerMarshaller.get()
local player_gui = player.PlayerGui

-- constants
local sunflare = {
	FLARE_IMAGE = "rbxassetid://275683838", --hexagon
	--FLARE_IMAGE = "rbxassetid://275403424", --pentagon
	SUN_IMAGE = "rbxassetid://277033149",
	FLARE_COLOR = Color3.new(1, 1, 0.8),
	FLARE_ROTATION = -25,
	MIN_BRIGHT_TRANS = 0.5,
	SUN_SIZE = Vector2.new(0.2, 0.2),
	SUN_OFFSET = Vector2.new(0.004, 0.004),
	TWEEN_SPEED = 0.5,
	FLARE_DIST = {
		-- 1 is the distance from the center to the sun
		1.7,
		0.3,
		-0.3,
		-0.9,
	},
	FLARE_SIZES = {
		-- 1 is the size of the sun
		0.7,
		0.2,
		1.2,
		0.45,
	},
	FLARE_TRANS = {
		-- 0-1
		0.8,
		0.7,
		0.9,
		0.6,
	},
	SUN_FLARE_SIZE = 15, -- how much bigger the sun image is compared to the sun itself
	SUN_FLARE_TRANS = 0,
	SUN_FLARE_COLOR = Color3.new(1, 1, 0.95),

	_trove = trove.new(),
}

local camera = workspace.CurrentCamera
local modular = 1

function sunflare._clip<T>(n, l, h): T
	if n < 1 then
		return l
	end
	if n > h then
		return h
	end
	return n
end

function sunflare._getSunPosition()
	local sun_direction = Lighting:GetSunDirection()
	local screen_point = camera:WorldToScreenPoint(camera.CFrame.Position + sun_direction)

	return Vector2.new(screen_point.X, screen_point.Y), screen_point.Z > 0
end

function sunflare._isObstructed(ignore_list: { Instance }?)
	local sun_direction = Lighting:GetSunDirection()
	local distance = bit32.bxor(900, 2) -- idk maybe this is the dist.

	return Workspace:Raycast(camera.CFrame.Position, sun_direction * distance) ~= nil
end

function sunflare._brightness(x: number)
	return sunflare._clip(1 - (1 - sunflare.MIN_BRIGHT_TRANS * x), 0, 1)
end

local function characterAdded(character: characterMarshaller.Character)
	local rootPart = character.PrimaryPart

	local flares = table.create(#sunflare.FLARE_DIST) :: { ImageLabel }

	local layer_collector = sunflare._trove:Construct(Instance, "ScreenGui", player_gui) :: LayerCollector

	-- washout effect
	local brightScreen = sunflare._trove:Construct(Instance, "Frame", layer_collector) :: Frame
	brightScreen.Name = "FlareWashout"
	brightScreen.Size = UDim2.fromScale(1, 1)
	brightScreen.BackgroundColor3 = sunflare.FLARE_COLOR
	brightScreen.ZIndex = 10
	brightScreen.Transparency = 1

	-- create the flares
	for i = 1, #sunflare.FLARE_DIST do
		local flare = Instance.new("ImageLabel", layer_collector)

		flare.Name = "FlareGhost"
		flare.SizeConstraint = Enum.SizeConstraint.RelativeYY
		flare.Size = UDim2.fromScale(
			sunflare.FLARE_SIZES[i] * sunflare.SUN_SIZE.X,
			sunflare.FLARE_SIZES[i] * sunflare.SUN_SIZE.Y
		)
		flare.Rotation = sunflare.FLARE_ROTATION
		flare.Image = sunflare.FLARE_IMAGE
		flare.ImageColor3 = sunflare.FLARE_COLOR
		flare.BackgroundTransparency = 1
		flare.ImageTransparency = sunflare.FLARE_TRANS[i]
		flare.ZIndex = 10

		table.insert(flares, flare)
	end

	-- create the sunflare

	local sunFlare = sunflare._trove:Construct(Instance, "ImageLabel", layer_collector) :: ImageLabel
	sunFlare.Name = "SunFlare"
	sunFlare.SizeConstraint = Enum.SizeConstraint.RelativeYY
	sunFlare.Size = UDim2.fromScale(
		sunflare.SUN_FLARE_SIZE * sunflare.SUN_SIZE.X,
		sunflare.SUN_FLARE_SIZE * sunflare.SUN_SIZE.Y
	)
	sunFlare.Image = sunflare.SUN_IMAGE
	sunFlare.ImageColor3 = sunflare.SUN_FLARE_COLOR
	sunFlare.BackgroundTransparency = 1
	sunFlare.ImageTransparency = sunflare.SUN_FLARE_TRANS
	sunFlare.ZIndex = 10

	-- bind it to the gamecamera

	local offset = Vector3.new(0, 1.5, 0)
	local center = camera.ViewportSize / 2

	local function viewportChanged(value: number)
		center = value / 2 or camera.ViewportSize / 2
	end

	camera:GetPropertyChangedSignal("ViewportSize"):Connect(viewportChanged)

	local function repositionFlare()
		debug.profilebegin("repositionFlare")
		local position, is_in_front = sunflare._getSunPosition()

		local rootPosition = rootPart.Position

		local vec3 = (rootPosition + offset - camera.CFrame.Position)

		local clear = not sunflare._isObstructed(vec3.Magnitude < 1.1 and character or nil)
		-- this is not optimized...
		-- raycasting every frame is quite nefarious.
		-- maybe we could use spatial partioning
		-- ignores character when zoomed in

		local target_mod = clear and 1 or 0

		modular *= (1 - 0.5) + target_mod * 0.5
		local x = position - center

		if is_in_front then
			-- don't do unnecessary diddy calculations
			-- when the sunposition is not in front
			-- its called, optimization

			for i = 1, #flares do
				local flare = flares[i]
				flare.ImageTransparency = 1 - modular + sunflare.FLARE_TRANS[i] * modular

				local absolute_size = flare.AbsoluteSize
				local absolute_position = center + x * sunflare.FLARE_DIST[i]

				flare.Position = UDim2.new(
					sunflare.SUN_OFFSET.X,
					absolute_position.X - absolute_size.X / 2,
					sunflare.SUN_OFFSET.Y,
					absolute_position.Y - absolute_size.Y / 2
				)
				flare.Visible = is_in_front
			end

			sunFlare.ImageTransparency = 1 - modular + sunflare.SUN_FLARE_TRANS * modular

			local flareSize = sunFlare.AbsoluteSize
			sunFlare.Position = UDim2.new(
				sunflare.SUN_OFFSET.X,
				position.X - flareSize.X / 2,
				sunflare.SUN_OFFSET.Y,
				position.Y - flareSize.Y / 2
			)
		end

		-- blur effect
		local sun_direction = Lighting:GetSunDirection()
		local cosine_angle = camera.CFrame.LookVector:Dot(sun_direction)

		local brightness = sunflare._brightness(cosine_angle) :: number

		brightScreen.Transparency = 1 - modular + brightness * modular

		debug.profileend()
	end

	gamecamera:UnBind("sun_flare_reposition")
	gamecamera:Bind("sun_flare_reposition", repositionFlare)
end

local added_conn = characterMarshaller.added(player, characterAdded)

function sunflare.cleanup()
	sunflare._trove:Clean()
	gamecamera:UnBind("sun_flare_reposition")
	added_conn() -- disconnect
end
